---
openapi: 3.0.3
info:
  title: ManageMC Web Service
  description: All ManageMC services exposed over the public internet
  version: 0.1.0
servers:
- url: http://localhost:9070/api/v1
  description: Development/test server
- url: https://api-demo.managemc.com/api/v1
  description: Demo server
- url: https://api.managemc.com/api/v1
  description: Production server
components:
  securitySchemes:
    user_web:
      type: http
      scheme: bearer
      bearerFormat: JWT
    user_mobile:
      type: http
      scheme: bearer
      bearerFormat: JWT
    user_minecraft:
      type: http
      scheme: bearer
      bearerFormat: JWT
    external_minecraft:
      type: http
      scheme: bearer
      bearerFormat: JWT
    internal_minecraft:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    NumericIdentifier:
      in: path
      name: id
      schema:
        type: integer
        format: int64
      required: true
      description: a record's internal ID
    FlexiblePlayerId:
      in: path
      name: id
      x-validate: UUID_OR_ID
      schema:
        type: string
      required: true
      description: the player's internal ID or UUID
  schemas:
    EmptyResponse:
      description: a no-op response
      properties:
        ok:
          type: boolean
          default: true
    ErrorMessage:
      type: string
      description: |
        A brief message indicating to the developer what went wrong. The presence of this
        field indicates that the consuming application was supposed to have prevented this
        error. Such errors should not be surfaced explicitly to the user; a general purpose
        "client error" message will do.
    PunishmentVisibility:
      type: string
      enum:
      - PUBLIC
      - PRIVATE
      - SHADOW
      default: PUBLIC
      description: |
        This describes who is aware that a punishment was issued.

        - PUBLIC = any random person on the internet can see basic details about the punishment (default)
        - PRIVATE = only the server network that issued the punishment and the player who received it know about the punishment
        - SHADOW = only staff on the server network know about the punishment (even the player is not aware that they were punished)

        Only owners, admins, and players with the `com.managemc.staff.punishments.shadow.manage` permission can create shadow punishments.

        Shadow punishments are a useful solution for spambots and cases of exceptionally bad behavior but are very easy to
        misuse. Staff members should be warned of the risks. Only admins and the server owner may issue shadow punishments by
        default. In general, we recommend not advertising the fact that this feature exists even to moderators.

        Shadow punishments work as follows:

        - mutes: player sees their own messages in chat, giving them no reason to suspect that the messages are hidden from everyone else
        - bans/IP bans: player appears to experience a connection timeout of variable length when joining the server (somewhat common in the wild)
    PlayerVerificationStatus:
      type: string
      enum:
      - PENDING
      - VALID
      - INVALID
      description: |
        After players are created in our database, we asynchronously verify that all of them are real by calling
        Mojang's API. When players are created, they are created with either a UUID, which is ideal as this allows
        for speedy verification) or a username and a timestamp at which the player was known to have that username,
        which requires a more involved process. We must support both creation mechanisms because some servers are
        using out of date plugins that do not save the player UUID.

        - PENDING: we haven't validated the player yet
        - VALID: we determined that the player is real
        - INVALID: requires manual review: either the player is not real, or we could not determine its UUID automatically
    PlayerUsername:
      type: string
      pattern: "^[a-zA-Z0-9_]{1,16}$"
      description: |
        A player's Minecraft display name. Usernames can be 1-16 characters long (with the vast majority being
        3 chars or more) and can contain alphanumeric characters and underscores only. Players can change their
        usernames periodically, which has two consequences for us: we cannot guarantee that a player's username
        is up to date at any given time, and it is possible for two players to have the same username in our
        database, even though this is not possible in the wild.
    PlayerUuid:
      type: string
      format: uuid
      pattern: "^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$"
      description: 'A globally unique and permanent identifier that Mojang has assigned
        to a Minecraft player.

        '
    IPv4Address:
      type: string
      pattern: "^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$"
      description: an IPv4 address
    HexColor:
      type: string
      pattern: "^#[a-f,0-9]{6}$"
      description: |
        Hexidecimal code representing a color displayed by a web browser. Must be a pound sign (#)
        plus six characters 0-9 or a-f.
    PluginVersionStatus:
      type: string
      enum:
      - OK
      - DEPRECATED
      - NOT_SUPPORTED
      description: |
        Indicates whether the client needs to update (and how urgently).

        - OK = client is using a supported version
        - DEPRECATED = client is using a deprecated version and should update as soon as possible
        - NOT_SUPPORTED = client is using a deprecated version with known defects and must update now (generally this is blocking)
    AccusationVerdict:
      type: string
      enum:
      - CONCLUSIVE
      - INCONCLUSIVE
      description: |
        This describes how an accusation was evaluated.

        - CONCLUSIVE = the report conclusively proves that the player was breaking the rules
        - INCONCLUSIVE = the evidence provided is wrong or inconclusive
    HealthCheck:
      properties:
        status:
          type: string
          enum:
          - HEALTHY
          description: an enum consisting only of "HEALTHY"
      required:
      - status
    PingPong:
      properties:
        message:
          type: string
          description: the word "pong!"
      required:
      - message
    GeneratePlayerTokenInput:
      properties:
        player_uuid:
          "$ref": "#/components/schemas/PlayerUuid"
      required:
      - player_uuid
    GenerateInternalServiceTokenInput:
      properties:
        public_key:
          type: string
          description: the public key in a public/private key pair
        private_key:
          type: string
          description: the private key in a public/private key pair
      required:
      - public_key
      - private_key
    GenerateExternalServiceTokenInput:
      properties:
        public_key:
          type: string
          description: the public key in a public/private key pair
        private_key:
          type: string
          description: the private key in a public/private key pair
        server_group:
          type: string
          description: |
            name of the server group

            this field is usually necessary for plugins that will interact with the API on behalf
            of players, but not so for plugins like the punishment exporter for which the server
            group will never matter.
      required:
      - public_key
      - private_key
    ExternalMinecraftKey:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID
        public_key:
          type: string
          description: the public key (private key exists but is not visible)
        created_at:
          type: integer
          format: int64
          description: epoch time (millis) at which the key was created
        name:
          type: string
          description: user-configured name for the key for disambiguation in case
            they use several
        last_used:
          type: integer
          format: int64
          description: |
            The epoch time (millis) at which the key was last used to generate a JWT.

            The user can use this field to decide whether it's safe to disabley a key. However, the
            user should be allowed to disable any key regardless of whether it's in use.
        created_by:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
      required:
      - id
      - public_key
      - created_at
      - name
      - last_used
      - created_by
    CreateExternalMinecraftKeyInput:
      properties:
        name:
          type: string
          description: |
            The user-issued name of the API key. This has no programmatic significance and only exists
            to help users with many keys avoid mixing them up.
      required:
      - name
    CreateExternalMinecraftKeyResponse:
      properties:
        key:
          "$ref": "#/components/schemas/ExternalMinecraftKey"
        private_key:
          type: string
          description: the private key, visible only this once
      required:
      - key
      - private_key
    UpdateExternalMinecraftKeyInput:
      properties:
        name:
          type: string
          description: |
            The user-issued name of the API key. This has no programmatic significance and only exists
            to help users with many keys avoid mixing them up.
      required:
      - name
    ApplicationAuthToken:
      properties:
        token:
          type: string
          description: |
            The token is a JWT that can be used to make subsequent requests to this API. There are
            two types of JWTs generated by this API:

            - internal_minecraft: A Minecraft server run by us. This is used only for linking
              Minecraft accounts with ManageMC accounts. We cannot trust external consumers
              to correctly authenticate Minecraft accounts with Mojang, because it's possible
              to run servers in "offline mode" which allows clients to lie about who they are.
              This is useful if, for example, authentication is performed by a proxy such as
              BungeeCord, allowing players to seamlessly (and securely) switch between servers
              on the same network without being authenticated more than once. This is actually
              very common.
            - external_minecraft: this JWT represents a Minecraft server run by a customer. Always
              includes the server network and server group IDs.

            All JWTs have metadata in their base64-encoded payloads. The metadata format varies
            based on the JWT type.

            All JWTs expire eventually and have no leeway period. We recommend re-issuing tokens
            for any request made up to 30 seconds before the expiration time.

            The `token` field will be blank if the consumer's credentials are wrong.
    UserAuthToken:
      properties:
        token:
          type: string
          description: |
            The token is a JWT that can be used to make subsequent requests to this API. There are
            three types of JWTs generated by this API:

            - user_web: a user on a web application. This will probably be used exclusively in
              front-end web app code. This JWT may or may not have player and server network
              attributes in the payload, because not all users have linked player accounts or staff
              privileges on a server network.
            - user_mobile: a user on a mobile application. This will probably be used exclusively in
              front-end mobile app code. This JWT may or may not have player and server network
              attributes in the payload, because not all users have linked player accounts or staff
              privileges on a server network.
            - user_minecraft: a user on a Minecraft server hosted by a customer. This JWT is
              guaranteed to have player, server network, and server group attributes in the payload.

            We make a distinction between "web" and "mobile" users because in order to comply with app
            store terms of service, it must be impossible for mobile users to make payments or enter
            billing information. Thus, mobile JWTs have slightly reduced scope.

            All JWTs have metadata in their base64-encoded payloads. The metadata format varies based
            on the JWT type.

            All JWTs expire eventually and have no leeway period. We recommend re-issuing tokens for
            any request made up to 30 seconds before the expiration time.
      required:
      - token
    UpdateImportedPunishmentVisibilityInput:
      properties:
        visibility:
          type: string
          enum:
          - PUBLIC
          - PRIVATE
      required:
      - visibility
    PunishmentImport:
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          enum:
          - IN_PROGRESS
          - COMPLETE
          - CANCELLED
          description: |
            - IN_PROGRESS: the consumer is still adding punishment to the import
            - COMPLETE: the import has finished and the consumer can no longer add punishments to it
            - CANCELLED: the import has been cancelled and all punishments associated with it are archived
        punishments_added:
          type: integer
          format: int32
          description: the total number of punishments added by the import
        created_at_millis:
          type: integer
          format: int64
          description: epoch time at which the import began
        status_updated_at_millis:
          type: integer
          format: int64
          description: epoch time at which the import status changed (only present
            if status is not IN_PROGRESS)
        visibility_counts:
          "$ref": "#/components/schemas/PunishmentVisibilityCounts"
      required:
      - id
      - status
      - created_at_millis
      - punishments_added
      - visibility_counts
    PunishmentVisibilityCounts:
      description: punishment counts grouped by visibility
      properties:
        public_count:
          type: integer
          format: int32
        private_count:
          type: integer
          format: int32
        shadow_count:
          type: integer
          format: int32
        no_visibility_count:
          type: integer
          format: int32
      required:
      - public_count
      - private_count
      - shadow_count
      - no_visibility_count
    ImportableBans:
      properties:
        bans:
          type: array
          maxItems: 1000
          items:
            "$ref": "#/components/schemas/ImportableBanOrMute"
      required:
      - bans
    ImportableMutes:
      properties:
        mutes:
          type: array
          maxItems: 1000
          items:
            "$ref": "#/components/schemas/ImportableBanOrMute"
      required:
      - mutes
    ImportableWarnings:
      properties:
        warnings:
          type: array
          maxItems: 1000
          items:
            "$ref": "#/components/schemas/ImportableWarning"
      required:
      - warnings
    ImportableIpBans:
      properties:
        ip_bans:
          type: array
          maxItems: 1000
          items:
            "$ref": "#/components/schemas/ImportableIpBan"
      required:
      - ip_bans
    ImportableBanOrMute:
      properties:
        offender:
          "$ref": "#/components/schemas/ImportablePunishmentPlayer"
        issuer:
          "$ref": "#/components/schemas/ImportablePunishmentPlayer"
        visibility:
          "$ref": "#/components/schemas/PunishmentVisibility"
        scope:
          type: array
          items:
            type: string
          description: |
            Names of the server groups on which the punishment should apply. Null or empty
            array scopes the punishment to all servers.
        reason:
          type: string
        details:
          type: string
        duration_millis:
          type: integer
          format: int64
          minimum: 0
        pardon:
          "$ref": "#/components/schemas/ImportablePunishmentPardon"
        issued_at_millis:
          type: integer
          format: int64
          minimum: 1242532800000
        source:
          type: string
      required:
      - offender
      - issued_at_millis
    ImportableWarning:
      properties:
        offender:
          "$ref": "#/components/schemas/ImportablePunishmentPlayer"
        issuer:
          "$ref": "#/components/schemas/ImportablePunishmentPlayer"
        reason:
          type: string
        details:
          type: string
        pardon:
          "$ref": "#/components/schemas/ImportablePunishmentPardon"
        issued_at_millis:
          type: integer
          format: int64
          minimum: 1242532800000
        source:
          type: string
      required:
      - offender
      - issued_at_millis
    ImportableIpBan:
      properties:
        min_ipv4_address:
          "$ref": "#/components/schemas/IPv4Address"
        max_ipv4_address:
          "$ref": "#/components/schemas/IPv4Address"
        issuer:
          "$ref": "#/components/schemas/ImportablePunishmentPlayer"
        visibility:
          "$ref": "#/components/schemas/PunishmentVisibility"
        scope:
          type: array
          items:
            type: string
          description: |
            Names of the server groups on which the punishment should apply. Null or empty
            array scopes the punishment to all servers.
        reason:
          type: string
        details:
          type: string
        duration_millis:
          type: integer
          format: int64
          minimum: 0
        pardon:
          "$ref": "#/components/schemas/ImportablePunishmentPardon"
        issued_at_millis:
          type: integer
          format: int64
          minimum: 1242532800000
        source:
          type: string
      required:
      - min_ipv4_address
      - max_ipv4_address
      - issued_at_millis
    ImportablePunishmentPardon:
      properties:
        pardoner:
          "$ref": "#/components/schemas/ImportablePunishmentPlayer"
        details:
          type: string
        pardoned_at_millis:
          type: integer
          format: int64
          minimum: 1242532800000
      required:
      - pardoned_at_millis
    ImportablePunishmentPlayer:
      properties:
        uuid:
          "$ref": "#/components/schemas/PlayerUuid"
        username:
          "$ref": "#/components/schemas/PlayerUsername"
    ServerGroup:
      properties:
        id:
          type: integer
          format: int64
          description: the internal ID of the server group
        label:
          type: string
          description: the name of the server group
        hex_color:
          "$ref": "#/components/schemas/HexColor"
        created_at_millis:
          type: integer
          format: int64
          description: 'Epoch time (millis) at which the server group was configured.

            '
        active_server_count:
          type: integer
          format: int32
          description: Number of online servers currently associated with the server
            group
        last_heartbeat_at:
          type: integer
          format: int64
          description: Epoch time at which an associated server most recently was
            known to be alive (may be null)
      required:
      - id
      - label
      - created_at_millis
      - hex_color
      - active_server_count
    ServerGroupAbridged:
      properties:
        id:
          type: integer
          format: int64
          description: the internal ID of the server group
        label:
          type: string
          description: the name of the server group
        hex_color:
          "$ref": "#/components/schemas/HexColor"
      required:
      - id
      - label
    UpdateServerGroupInput:
      properties:
        hex_color:
          "$ref": "#/components/schemas/HexColor"
      required:
      - hex_color
    StaffMetrics:
      properties:
        player:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        rank:
          type: string
          enum:
          - OWNER
          - ADMIN
          - STAFF
          description: |
            The player's staff rank.

            - `OWNER`: the server owner (there is always exactly one)
            - `ADMIN`: unrestricted permissions on all servers
            - `STAFF`: one or more staff permissions on one or more servers
        server_groups_with_permissions:
          type: array
          items:
            type: string
            description: |
              The names of server groups on which the player has staff permissions. If the field is
              null, that means the player has staff permissions on all servers. If the field is an empty
              array, it means that all of the player's staff permissions are overridden in some way and
              may benefit from some cleanup. The UI may flag this very unlikely edge case for the user
              to fix.
        login_history:
          type: array
          description: Start/end times of player login history with no guaranteed
            order. Excludes active sessions.
          items:
            "$ref": "#/components/schemas/Timeframe"
        punishment_issue_times:
          type: array
          items:
            type: integer
            format: int64
          description: epoch times at which this player issued punishments, sorted
            starting with earliest
        accusation_review_times:
          type: array
          items:
            type: integer
            format: int64
          description: epoch times at which this player reviewed accusations, sorted
            starting with earliest
        accusation_review_style:
          description: 'Stats on the player''s accusation rulings. Stats are recalculated
            at least once every 24 hours.

            '
          "$ref": "#/components/schemas/AccusationReviewStyle"
      required:
      - player
      - rank
      - login_history
      - punishment_issue_times
      - accusation_review_times
    AccusationReviewStyle:
      properties:
        style:
          type: integer
          format: int32
          minimum: -100
          maximum: 100
          description: |
            A numerical characterization of the player's review style where -100 is maximally cautious
            and 100 is maximally assertive. This number is derived from accusations with video evidence
            on which staff members disagree on the verdict.

            - Cautious players tend to vote `INCONCLUSIVE` in the event of a disagreement
            - Assertive players tend to vote `CONCLUSIVE` in the event of a disagreement

            Verdicts with which the user exercised override power are excluded from calculations.

            The player's reviewing style is just a characterization. It is only useful as a performance
            metric when considered in tandem with `accusation_review_deviation`.
        deviation:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
          description: |
            A numerical characterization of the player's tendency to disagree with other staff members on
            the verdict of an accusation with video evidence. Players with a deviation of 0 never disagree
            at all, whereas players with a deviation of 100 always disagree. Neither extreme is realistic.

            If a staff member issues an overriding verdict on an accusation, then that verdict is treated as
            the absolute truth and all other verdicts are compared only to it. Otherwise, verdicts are
            compared to each other.

            Verdicts with which the user exercised override power are excluded from calculations.

            The player's reviewing deviation may be a useful metric for performance evaluation, but its
            usefulness depends on how diligent higher level staff are about issuing overriding verdicts when
            disagreement occurs.
        last_calculated_at:
          type: integer
          format: int64
          description: Epoch time at which these metrics were last asynchronously
            calculated
      required:
      - style
      - deviation
      - last_calculated_at
    CreateAdminInput:
      properties:
        uuid:
          "$ref": "#/components/schemas/PlayerUuid"
      required:
      - uuid
    DemoteAdminInput:
      properties:
        reset_permissions:
          type: boolean
          description: |
            If true, then all of the player's permissions will be reset. If false, then the player will retain
            any permissions that were previously configured, potentially including staff permissions.
      required:
      - reset_permissions
    EnhancedPlayerInfo:
      allOf:
      - "$ref": "#/components/schemas/CursoryPlayerInfo"
      - type: object
        properties:
          rank:
            type: string
            enum:
            - OWNER
            - ADMIN
            - MOD
            - RANDO
            description: |
              The player's rank on the active server network.

              - OWNER: the server owner, typically the person who configured and is paying for ManageMC
              - ADMIN: maximum administrative rank with unrestricted access to almost all features (but not e.g. payment)
              - MOD: a server moderator, a lesser staff rank with limited access to features
              - RANDO: a non-staff player

              Will be null if caller does not have one of the special permissions listed in the endpoint description.
          active_server:
            "$ref": "#/components/schemas/PlayerActiveServer"
            description: 'Will be null if caller does not have one of the special
              permissions listed in the endpoint description.

              '
          linked:
            type: boolean
            description: |
              Whether the player is linked with a ManageMC user.

              Will be null if caller does not have one of the special permissions listed in the endpoint description.
          imported_by:
            type: integer
            format: int64
            description: The server network, if any, that imported the player through
              a punishment or player import
        required:
        - id
        - status
    PlayerActiveServer:
      properties:
        group:
          type: string
          description: the name (label) of the server group under which the server
            falls
        name:
          type: string
          description: the name of the server, which may be a public IP address or
            something else
      required:
      - group
      - name
    CreatePlayerInput:
      properties:
        username:
          "$ref": "#/components/schemas/PlayerUsername"
      required:
      - username
    CreatePlayerResponse:
      properties:
        player:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
    CursoryPlayerInfo:
      properties:
        id:
          type: integer
          format: int64
          description: the player's ManageMC ID
        uuid:
          "$ref": "#/components/schemas/PlayerUuid"
        username:
          "$ref": "#/components/schemas/PlayerUsername"
        status:
          "$ref": "#/components/schemas/PlayerVerificationStatus"
      required:
      - id
      - status
    AltAccountAnalysisConclusion:
      type: string
      enum:
      - NO_RELATIONSHIP
      - ALT
      - SHARED_ALT
      - FRIEND_OR_FAMILY
      description: |
        An enum indicating the player's relationship to another:

        - NO_RELATIONSHIP: the player has no relationship with the subject player
        - ALT: the player is an alternate account used by the same human as the subject player
        - SHARED_ALT: the player is an alternate account, but may be shared by other users
        - FRIEND_OR_FAMILY: the player shares IP addresses with the subject player but is
            probably owned by a different human.
    AltAccountAnalysisConfidence:
      type: string
      enum:
      - LOW
      - HIGH
      description: |
        An enum representing the user's confidence in the correctness of the conclusion:

        - LOW: user was not very confident that the conclusion is correct
        - HIGH: user was confident that the conclusion is correct
    ImportablePlayer:
      properties:
        uuid:
          "$ref": "#/components/schemas/PlayerUuid"
        username:
          "$ref": "#/components/schemas/PlayerUsername"
      required:
      - uuid
    ImportPlayersInput:
      properties:
        players:
          type: array
          maxItems: 1000
          items:
            "$ref": "#/components/schemas/ImportablePlayer"
      required:
      - players
    Pardon:
      properties:
        pardoned_at:
          type: integer
          format: int64
          description: the epoch time at which the punishment was pardoned
        details:
          type: string
          description: the user-provided reason for the pardon (visible to staff only)
        pardoner:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
      required:
      - pardoned_at
    Warning:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID of the warning (not unique across all punishment
            types!)
        type:
          type: string
          enum:
          - WARNING
          description: always "WARNING"
        reason:
          type: string
          description: the reason why the warning was issued (visible to the offending
            player)
        details:
          type: string
          description: elaboration on the circumstances of the warning (visible to
            staff only)
        via_onboarding:
          type: boolean
          description: whether the warning was imported from an external source while
            the customer onboarded
        seen_by_player:
          type: boolean
          description: whether the player has seen the warning yet
        source:
          type: string
          description: a short string representing how the punishment was issued
        external_id:
          type: string
          description: a unique identifier for the warning that is guaranteed not
            to overlap with IDs of other punishment types
        active:
          type: boolean
          description: 'Warnings are considered "active" if they have not been pardoned.
            Warnings do not expire.

            '
        issuer:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        offender:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        issued_at:
          type: integer
          format: int64
          description: the epoch time at which the warning was issued
        pardon:
          "$ref": "#/components/schemas/Pardon"
      required:
      - id
      - type
      - via_onboarding
      - seen_by_player
      - external_id
      - active
      - offender
      - issued_at
    BanOrMute:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID of the ban or mute (not unique across all punishment
            types!)
        type:
          type: string
          enum:
          - BAN
          - MUTE
          description: |
            - BAN = a punishment that prevents a player from joining one or more servers
            - MUTE = a punishment that prevents a player from communicating with other players on one or more servers
        reason:
          type: string
          description: the reason why the punishment was issued (visible to the offending
            player)
        details:
          type: string
          description: elaboration on the circumstances of the punishment (visible
            to staff only)
        duration:
          type: integer
          format: int64
          description: the total time (in millis) during which the punishment will
            be active
        visibility:
          "$ref": "#/components/schemas/PunishmentVisibility"
        via_onboarding:
          type: boolean
          description: whether the punishment was imported from an external source
            while the customer onboarded
        scope:
          type: array
          items:
            type: integer
            format: int64
          description: |
            An array of server group IDs on which the punishment applies. If an empty array, the punishment applies to all
            servers.
        source:
          type: string
          description: a short string representing how the punishment was issued
        external_id:
          type: string
          description: a unique identifier for the punishment that is guaranteed not
            to overlap with IDs of other punishment types
        active:
          type: boolean
          description: 'Bans and Mutes are considered "active" if they have neither
            expired nor been pardoned.

            '
        issuer:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        offender:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        issued_at:
          type: integer
          format: int64
          description: the epoch time at which the warning was issued
        pardon:
          "$ref": "#/components/schemas/Pardon"
      required:
      - id
      - type
      - visibility
      - via_onboarding
      - scope
      - external_id
      - active
      - offender
      - issued_at
    IpBan:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID of the ban or mute (not unique across all punishment
            types!)
        type:
          type: string
          enum:
          - IP_BAN
          - RANGE_IP_BAN
          description: |
            The punishment type.

            `IP_BAN`: a ban issued against a single IP address
            `RANGE_IP_BAN`: a ban issued against a range of IP addresses
        reason:
          type: string
          description: the reason why the punishment was issued (visible to the offending
            player)
        details:
          type: string
          description: elaboration on the circumstances of the punishment (visible
            to staff only)
        duration:
          type: integer
          format: int64
          description: the total time (in millis) during which the punishment will
            be active
        visibility:
          "$ref": "#/components/schemas/PunishmentVisibility"
        via_onboarding:
          type: boolean
          description: whether the punishment was imported from an external source
            while the customer onboarded
        scope:
          type: array
          items:
            type: integer
            format: int64
          description: |
            An array of server group IDs on which the punishment applies. If an empty array, the punishment
            applies to all servers.
        source:
          type: string
          description: a short string representing how the punishment was issued
        external_id:
          type: string
          description: a unique identifier for the punishment that is guaranteed not
            to overlap with IDs of other punishment types
        active:
          type: boolean
          description: 'Bans and Mutes are considered "active" if they have neither
            expired nor been pardoned.

            '
        issuer:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        ip_address_or_range:
          type: string
          description: |
            An IPv4 address or range of IPv4 addresses. CIDR notation is not supported because
            humans are bad at understanding it and these addresses come from human user input.

            Examples:
            - 1.2.3.4 (IPv4 address)
            - 1.2.3.4-1.2.3.10 (IPv4 address range)
        issued_at:
          type: integer
          format: int64
          description: the epoch time at which the warning was issued
        pardon:
          "$ref": "#/components/schemas/Pardon"
      required:
      - id
      - type
      - visibility
      - via_onboarding
      - scope
      - external_id
      - active
      - ip_address_or_range
      - issued_at
    PlayerPunishment:
      description: a punishment issued against a player (as opposed to, for example,
        an IP address)
      oneOf:
      - "$ref": "#/components/schemas/BanOrMute"
      - "$ref": "#/components/schemas/Warning"
    CreateBanOrMuteInput:
      properties:
        visibility:
          "$ref": "#/components/schemas/PunishmentVisibility"
        scope:
          type: array
          items:
            type: integer
            format: int64
          description: |
            IDs of server groups on which the punishment should apply. An empty array or
            null indicates that the punishment should apply to all servers.
        reason:
          type: string
          description: the reason for the punishment (visible to the player)
        details:
          type: string
          description: more details about the punishment (visible to staff only)
        duration_millis:
          type: integer
          format: int64
          description: |
            Milliseconds until the punishment should expire. If this field is blank, then the
            punishment will never expire.

            Special permissions are required to create long or permanent punishments:
            - default: up to 24 hours
            - `com.managemc.staff.punishments.length.medium`: 7 days
            - `com.managemc.staff.punishments.length.long`: up to 30 days
            - `com.managemc.staff.punishments.length.permanent`: no restriction
      required:
      - visibility
    UpdateBanOrMuteInput:
      properties:
        visibility:
          "$ref": "#/components/schemas/PunishmentVisibility"
        reason:
          type: string
          description: the reason for the punishment (visible to the player)
        details:
          type: string
          description: more details about the punishment (visible to staff only)
        duration:
          type: integer
          format: int64
          minimum: 0
          description: |
            Milliseconds until the punishment should expire. If this field is blank, then the
            punishment will never expire.

            Special permissions are required to create long or permanent punishments:
            - default: up to 24 hours
            - `com.managemc.staff.punishments.length.medium`: 7 days
            - `com.managemc.staff.punishments.length.long`: up to 30 days
            - `com.managemc.staff.punishments.length.permanent`: no restriction
        scope:
          type: array
          items:
            type: integer
            format: int64
          description: |
            IDs of server groups on which the punishment should apply. An empty array or
            null indicates that the punishment should apply to all servers.
        pardon_details:
          type: string
          description: if the punishment has already been pardoned, this field will
            update the pardon details
      required:
      - visibility
    CreateWarningInput:
      properties:
        reason:
          type: string
          description: the reason for the warning (visible to the player)
        details:
          type: string
          description: more details about the warning (visible to staff only)
    UpdateWarningInput:
      properties:
        details:
          type: string
          description: more details about the punishment (visible to staff only)
        pardon_details:
          type: string
          description: if the punishment has already been pardoned, this field will
            update the pardon details
    CreateIpBanInput:
      properties:
        visibility:
          "$ref": "#/components/schemas/PunishmentVisibility"
        scope:
          type: array
          items:
            type: integer
            format: int64
          description: |
            IDs of server groups on which the punishment should apply. An empty array or
            null indicates that the punishment should apply to all servers.
        reason:
          type: string
          description: the reason for the punishment (visible to the player)
        details:
          type: string
          description: more details about the punishment (visible to staff only)
        duration_millis:
          type: integer
          format: int64
          description: milliseconds until the punishment should expire (if this field
            is blank, then the punishment will never expire)
      required:
      - visibility
    SearchPlayersInput:
      properties:
        input:
          "$ref": "#/components/schemas/PlayerUsername"
      required:
      - input
    SearchPlayersResponse:
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/CursoryPlayerInfo"
      required:
      - results
    UpdatePlayerUuidInput:
      properties:
        uuid:
          "$ref": "#/components/schemas/PlayerUuid"
      required:
      - uuid
    PlayerWatchList:
      properties:
        watched_players:
          type: array
          items:
            "$ref": "#/components/schemas/WatchedPlayer"
      required:
      - watched_players
    SearchIpAddressesInput:
      properties:
        input:
          type: string
          minLength: 1
          description: A substring intended to match one or more IPv4 addresses.
      required:
      - input
    SearchIpAddressesResponse:
      properties:
        results:
          type: array
          items:
            type: string
            description: An IP address
      required:
      - results
    IpAddress:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID
        address:
          "$ref": "#/components/schemas/IPv4Address"
        metadata:
          description: |
            IP address geolocation data, which is requested manually by users. This field will be
            null if users have never requested geolocation data.
          "$ref": "#/components/schemas/IpAddressMetadata"
      required:
      - id
      - address
    IpAddressMetadata:
      properties:
        resolved_at_millis:
          type: integer
          format: int64
          description: epoch time at which the IP geolocation data was last refreshed
        country:
          type: string
          description: full country name
        city:
          type: string
          description: full city name
        region:
          type: string
          description: name of the IP's geographic region (e.g. in the US, this is
            the name of the state)
        zip_code:
          type: string
          description: zip code (not guaranteed to be 5 digits)
        timezone:
          type: string
          description: time zone in words
        latitude:
          type: string
        longitude:
          type: string
        proxy:
          type: boolean
          description: whether the address is known to be a proxy
      required:
      - resolved_at_millis
    IpAddressDetails:
      properties:
        ip_address:
          "$ref": "#/components/schemas/IpAddress"
        login_history:
          type: array
          items:
            "$ref": "#/components/schemas/IpAddressLogin"
        bans:
          type: array
          description: Will be null unless caller has `com.managemc.staff.punishments.view`
          items:
            "$ref": "#/components/schemas/IpBan"
      required:
      - ip_address
      - login_history
    WatchedPlayer:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID of the player
        uuid:
          "$ref": "#/components/schemas/PlayerUuid"
        username:
          "$ref": "#/components/schemas/PlayerUsername"
        active_server:
          "$ref": "#/components/schemas/PlayerActiveServer"
      required:
      - id
      - uuid
      - username
    PlayerLoginHistory:
      properties:
        login_history:
          type: array
          items:
            "$ref": "#/components/schemas/PlayerLogin"
      required:
      - login_history
    ComparePlayerLoginHistoryInput:
      properties:
        other_player_id:
          type: integer
          format: int64
          description: Internal ID of the other player
        max_time_ago_days:
          type: integer
          format: int32
          minimum: 1
          description: Max number of days ago for which to fetch data (all-time stats
            are fetched by default)
      required:
      - other_player_id
    PlayerLoginHistoryComparison:
      properties:
        first_player_alone:
          type: integer
          format: int64
          description: 'time, in ms, during which the first player was online and
            the second player was not

            '
        second_player_alone:
          type: integer
          format: int64
          description: 'time, in ms, during which the other player was online and
            the first player was not

            '
        online_together_same_ip_address:
          type: integer
          format: int64
          description: 'time, in ms, during which both players were online and using
            the same IP address

            '
        online_together_different_ip_addresses:
          type: integer
          format: int64
          description: 'time, in ms, during which both players were online and using
            different IP addresses

            '
        online_together_same_server:
          type: integer
          format: int64
          description: 'time, in ms, during which both players were online and using
            the same Minecraft server

            '
        online_together_different_servers:
          type: integer
          format: int64
          description: 'time, in ms, during which both players were online and using
            different Minecraft servers

            '
        ip_address_usage:
          type: array
          description: usage of IP addresses by the two players, sorted by total player
            1 usage descending
          items:
            "$ref": "#/components/schemas/IpAddressUsageComparison"
      required:
      - first_player_alone
      - second_player_alone online_together_same_ip_address
      - online_together_different_ip_addresses
      - online_together_same_server
      - online_together_different_servers
    IpAddressUsageComparison:
      properties:
        ip_address:
          "$ref": "#/components/schemas/IPv4Address"
        first_player_usage:
          type: integer
          format: int64
          description: 'time, in ms, that the first player has been playing Minecraft
            using this IP address

            '
        second_player_usage:
          type: integer
          format: int64
          description: 'time, in ms, that the second player has been playing Minecraft
            using this IP address

            '
      required:
      - ip_address
      - first_player_usage
      - second_player_usage
    Timeframe:
      properties:
        start_millis:
          type: integer
          format: int64
          description: epoch millis at which timeframe began
        end_millis:
          type: integer
          format: int64
          description: epoch millis at which timeframe ended
      required:
      - start_millis
      - end_millis
    PlayerLogin:
      properties:
        server_group_id:
          type: integer
          format: int64
          description: internal ID of the server group the player used
        ip_address:
          "$ref": "#/components/schemas/IPv4Address"
        start_time_millis:
          type: integer
          format: int64
          description: epoch time at which the session began
        end_time_millis:
          type: integer
          format: int64
          description: "(optional) epoch time at which the session ended"
      required:
      - server_group_id
      - ip_address
      - start_time_millis
      - end_time_millis
    IpAddressLogin:
      properties:
        server_group_id:
          type: integer
          format: int64
          description: internal ID of the server group the player used
        player:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        start_time_millis:
          type: integer
          format: int64
          description: epoch time at which the session began
        end_time_millis:
          type: integer
          format: int64
          description: "(optional) epoch time at which the session ended"
      required:
      - server_group_id
      - player
      - start_time_millis
      - end_time_millis
    AltAccountAnalysisResult:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID of the analysis result
        player:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        analyzer:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
          description: |
            The player who last updated the analysis result. We're leaving this nullable in case
            later on we decide to automatically analyze alt accounts.
        conclusion:
          "$ref": "#/components/schemas/AltAccountAnalysisConclusion"
        confidence:
          "$ref": "#/components/schemas/AltAccountAnalysisConfidence"
        last_analysis_at:
          type: integer
          format: int64
          description: |
            Epoch time at which alt account analysis was last run for this player. "Fresh"
            analysis results are usually more trustworthy, whereas older results may be worth
            checking again in case new login data is available.
        comment:
          type: string
          description: optional user-provided summary of the analysis
        banned:
          type: boolean
          description: whether the account has any active bans on the active server
            network
        muted:
          type: boolean
          description: whether the account has any active mutes on the active server
            network
      required:
      - id
      - player
      - conclusion
      - confidence
      - last_analysis_at
      - banned
      - muted
    PlayerIpAddress:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID of the IP address
        address:
          type: string
          description: raw IPv4 address
        activity_millis:
          type: integer
          format: int64
          description: |
            Total time in milliseconds that the player spent logged into Minecraft servers
            with this IP address. Only servers on the active server network are considered.
        most_recent_use:
          type: integer
          format: int64
          description: epoch time (millis) of most recent login with this address
        banned:
          type: boolean
          description: 'whether the IP address is actively banned on any server within
            the active server network

            '
      required:
      - id
      - address
      - activity_millis
      - most_recent_use
      - banned
    AnalyzeAltAccountInput:
      properties:
        other_player_id:
          type: integer
          format: int64
          description: internal ID of the player whose page is *not* being displayed
        conclusion:
          "$ref": "#/components/schemas/AltAccountAnalysisConclusion"
        confidence:
          "$ref": "#/components/schemas/AltAccountAnalysisConfidence"
        comment:
          type: string
          description: optional user-provided summary of the analysis
      required:
      - other_player_id
      - conclusion
      - confidence
    PlayerNote:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID
        note:
          type: string
          description: the note text
        author:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        is_hidden:
          type: boolean
          description: hidden notes are visible to the author only
        created_at:
          type: integer
          format: int64
      required:
      - id
      - note
      - is_hidden
      - created_at
    CreateNoteInput:
      properties:
        note:
          type: string
          description: the contents of the note
        is_hidden:
          type: boolean
          description: whether the note should be hidden to everyone except the author
      required:
      - note
      - is_hidden
    UpdateNoteInput:
      properties:
        contents:
          type: string
          description: the contents of the note
      required:
      - contents
    PardonPunishmentsInput:
      properties:
        punishments:
          type: array
          minItems: 1
          maxItems: 1000
          items:
            "$ref": "#/components/schemas/PunishmentIdAndType"
        pardon_details:
          type: string
          description: The reason for issuing the pardons (visible to staff only)
      required:
      - punishments
    PardonPunishmentsResponse:
      properties:
        inactive_punishments_found:
          type: boolean
          description: |
            Whether any of the punishment(s) provided were inactive. Punishments are inactive if they
            have expired or been pardoned.
      required:
      - inactive_punishments_found
    DeletePunishmentsInput:
      properties:
        punishments:
          type: array
          minItems: 1
          maxItems: 1000
          items:
            "$ref": "#/components/schemas/PunishmentIdAndType"
      required:
      - punishments
    PunishmentIdAndType:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID of the punishment
        type:
          type: string
          enum:
          - BAN
          - MUTE
          - WARNING
          - IP_BAN
          - RANGE_IP_BAN
          description: The punishment type, which should be easily inferred from punishments
            retrieved by the API.
      required:
      - id
      - type
    EmitHeartbeatInput:
      properties:
        version:
          type: string
          description: the ManageMC version the client is using
          pattern: "^\\d+\\.\\d+\\.\\d+(-SNAPSHOT){0,1}$"
        server_id:
          type: integer
          format: int64
          description: internal ID of the active server
        player_count:
          type: integer
          format: int32
          description: the number of players currently online
        player_count_collected_at_millis:
          type: integer
          format: int64
          description: The epoch time at which player count was collected.
      required:
      - version
      - server_id
      - player_count
      - player_count_collected_at_millis
    EmitHeartbeatResponse:
      properties:
        version_status:
          "$ref": "#/components/schemas/PluginVersionStatus"
      required:
      - version_status
    EmitInitialHeartbeatInput:
      properties:
        version:
          type: string
          description: the ManageMC version the client is using
          pattern: "^\\d+\\.\\d+\\.\\d+(-SNAPSHOT){0,1}$"
        server_name:
          type: string
          description: |
            The best string we are aware of to describe the server. This might be a public IP address or a configurable
            attribute from the server's Spigot or BungeeCord config.
      required:
      - version
      - server_name
    EmitInitialHeartbeatResponse:
      properties:
        version_status:
          "$ref": "#/components/schemas/PluginVersionStatus"
        server_id:
          type: integer
          format: int64
          description: internal ID of the server (needed for subsequent heartbeat
            requests)
      required:
      - version_status
      - server_id
    EmitFinalHeartbeatInput:
      properties:
        server_id:
          type: integer
          format: int64
          description: internal ID of the active server
      required:
      - server_id
    LinkPlayerInput:
      properties:
        account_linking_token:
          type: string
          description: |
            A single-use token retrieved from the web or mobile app by a user for associating the Minecraft
            account with the user securely.
        uuid:
          "$ref": "#/components/schemas/PlayerUuid"
      required:
      - account_linking_token
      - uuid
    LinkPlayerResponse:
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - TOKEN_INCORRECT
          - ALREADY_LINKED
          description: |
            an enum value with the following statuses:

            - SUCCESS = Minecraft account successfully linked to user
            - TOKEN_INCORRECT = failed because the token was wrong
            - ALREADY_LINKED = failed because the Minecraft account is linked with a different user
      required:
      - status
    PluginVersionRecommendations:
      properties:
        minimum_version:
          type: string
          description: the minimum supported plugin version
        recommended_version:
          type: string
          description: the recommended plugin version
      required:
      - minimum_version
      - recommended_version
    MinecraftServer:
      properties:
        id:
          type: integer
          format: int64
          description: unique internal ID
        name:
          type: string
          description: the name of the server, which may be a public IP address or
            something else
        status:
          type: string
          enum:
          - ACTIVE
          - STOPPED
          - CRASHED
          description: |
            - `ACTIVE`: the server is currently online
            - `STOPPED`: the server is offline and shut down successfully
            - `CRASHED`: the server shut down without reporting to us, likely signaling a problem
        server_group_id:
          type: integer
          format: int64
          description: |
            The ID of the group to which this server belongs. The consumer is intended to fetch
            server groups separately.
        created_at_millis:
          type: integer
          format: int64
          description: epoch millis at which the server sent its first heartbeat
        last_heartbeat_at_millis:
          type: integer
          format: int64
          description: |
            Epoch millis at which the server sent its most recent heartbeat. It is unusual for a
            server's most recent heartbeat to have been more than 2 minutes ago; such servers
            should be flagged in the UI. Servers are marked as CRASHED after 10 minutes of no
            heartbeats.
        last_player_count:
          type: integer
          format: int32
          description: the number of players using this server at the time of the
            last heartbeat
      required:
      - id
      - name
      - status
      - server_group_id
      - created_at_millis
      - last_heartbeat_at_millis
      - last_player_count
    ServerTrafficSummary:
      properties:
        group_snapshots:
          type: array
          items:
            "$ref": "#/components/schemas/ServerGroupTrafficSnapshot"
        record_player_count:
          type: integer
          format: int32
          description: |
            The record number of concurrent players throughout the server network. If null, that
            means the record has not been calculated yet. Use the stats as an approximation.

            This number is a good approximation but might not be precise. Player count snapshots
            are taken every minute, on the minute.
        record_achieved_at:
          type: integer
          format: int64
          description: epoch time (millis) at which the player count record was achieved
      required:
      - group_snapshots
    ServerGroupTrafficSnapshot:
      properties:
        server_group:
          type: string
          description: the server group label to which the stats apply
        stats:
          type: array
          items:
            "$ref": "#/components/schemas/ServerTrafficStat"
        record_player_count:
          type: integer
          format: int32
          description: |
            The record number of active players on servers belonging to this group. If null, that
            means the record has not been calculated yet. Use the stats as an approximation.
        record_achieved_at:
          type: integer
          format: int64
          description: epoch time (millis) at which the player count record was achieved
        current_player_count:
          type: integer
          format: int32
          description: |
            The number of players currently online. Typically, this will be the same as the most
            recent player count snapshot for this server group, but it will be 0 instead if the
            most recent snapshot was collected more than 1:20 ago.

            You can sum these to determine the network-wide concurrent player total.
      required:
      - server_group
      - stats
      - current_player_count
    ServerTrafficStat:
      properties:
        player_count:
          type: integer
          format: int32
          description: the number of players playing concurrently on this server group
        collected_at_millis:
          type: integer
          format: int64
          description: |
            The epoch time at which this statistic was collected. This is guaranteed to represent a
            "whole" minute on the :00 second mark. The distance between stats is determined by the
            granuarity parameter. The default granularity, 15, will produce stats 0, 15, 30, and 45
            minutes after each hour. Skipped times indicate that the servers were all down at that
            time, so they may be treated as having player counts of 0.
      required:
      - player_count
      - collected_at_millis
    ServerNetwork:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID
        name:
          type: string
          description: customer-provided name of their server network
        owner:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        created_at:
          type: integer
          format: int64
          description: epoch time (millis) at which the server network was created
        server_photo_path:
          type: string
          description: url to the server network's profile photo (does not work right
            now)
        public_ip:
          type: string
          description: the user-facing domain of the server network
      required:
      - name
      - owner
      - created_at
      - public_ip
    ServerNetworkForRegularUsers:
      allOf:
      - "$ref": "#/components/schemas/ServerNetwork"
      - type: object
        properties:
          config:
            "$ref": "#/components/schemas/ServerNetworkConfigForRegularUsers"
        required:
        - config
    ServerNetworkConfigForRegularUsers:
      properties:
        video_max_length_seconds:
          type: integer
          format: int32
          description: |
            Maximum length of each video segment submitted as evidence for a hacker report.
            Imposing a restriction will force users to provide timestamps for their videos, which
            helps staff by pointing directly to relevant footage.

            If this field is null, then there is no restriction.
    AccusationConfig:
      properties:
        video_max_length_seconds:
          type: integer
          format: int32
          minimum: 30
          description: |
            Maximum length of each video segment submitted as evidence for a hacker report.
            Imposing a restriction will force users to provide timestamps for their videos, which
            helps staff by pointing directly to relevant footage.

            This is guaranteed to be no less than 30.
        min_reviews:
          type: integer
          format: int32
          minimum: 1
          description: |
            The minimum number of times any accusation must be reviewed. Reviews with override power
            bypass this rule.
        review_permit_expiration_time_minutes:
          type: integer
          format: int32
          minimum: 10
          description: |
            The amount of time, in minutes, that a staff member has to provide a verdict on a hacker
            report. Set this number high enough that staff members will not feel rushed, but low enough
            that if a reviewer goes AFK this won't delay the reviewing process unneccessarily. After a
            permit expires, the permit is returned to the pool to be reviewed by someone else. Reviewers
            can request more time if they actually need it.

            This is guaranteed to be no less than 10.
      required:
      - min_reviews
      - review_permit_expiration_time_minutes
    PunishmentConfig:
      properties:
        blocked_commands_for_muted_players:
          type: array
          items:
            type: string
          description: An array of strings representing commands that a muted player
            cannot use
      required:
      - blocked_commands_for_muted_players
    UpdateActiveServerNetworkInput:
      properties:
        name:
          type: string
          description: The display name of the server network. Uniqueness not enforced.
        public_ip:
          type: string
          description: The public "entry point" IP address of the server. Format not
            validated.
    FetchYouTubeVideoMetadataResponse:
      properties:
        metadata:
          "$ref": "#/components/schemas/YouTubeVideoMetadata"
    YouTubeVideoMetadata:
      properties:
        id:
          type: string
          description: the external ID of the YouTube video
        title:
          type: string
          description: the video title
        channel:
          type: string
          description: the name of the channel to which the video was uploaded
        length_seconds:
          type: integer
          format: int32
          description: the video's length in seconds
        published_at_millis:
          type: integer
          format: int64
          description: the epoch time at which the video was published
        privacy_status:
          type: string
          enum:
          - PUBLIC
          - UNLISTED
        thumbnail_url:
          type: string
          description: URL for the video's default thumbnail
        embeddable:
          type: boolean
          description: whether the video can be embedded on other websites
    WatchRequest:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID of the accusation
        server_network_id:
          type: integer
          format: int64
          description: internal ID of the server network on which the accusation was
            filed
        server_network_name:
          type: string
          description: display name of the server network
        server_group_id:
          type: integer
          format: int64
          description: internal ID of the server group on which the accusation was
            filed (optional)
        server_group_name:
          type: string
          description: name of the server group on which the accusation was filed
            (present only if `server_group_id` is)
        accuser:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        accusee:
          "$ref": "#/components/schemas/WatchedPlayer"
        status:
          type: string
          enum:
          - OPEN
          - CLOSED_AUTOMATIC
          - CLOSED_MANUAL
          - CLOSED_RULEBREAKING
          - CLOSED_NOT_RULEBREAKING
          - CLOSED_BY_REPORTER
          description: |
            Enum indicating the status of the report:

            - OPEN: request is open
            - CLOSED_AUTOMATIC: closed by automatic process, typically because the report is too old
            - CLOSED_MANUAL: closed manually by a staff member who deemed the report inactionable
            - CLOSED_RULEBREAKING: the player was found to be breaking the rules
            - CLOSED_NOT_RULEBREAKING: the player was found not to be breaking the rules
            - CLOSED_BY_REPORTER: closed by the reporter (e.g. if the report was filed accidentally)
        created_at_millis:
          type: integer
          format: int64
          description: epoch time at which the accusation was issued
        closed_at_millis:
          type: integer
          format: int64
          description: epoch time at which the accusation was closed (optional)
        in_game_distance:
          type: integer
          format: int32
          description: |
            If provided, this means that the accuser and accusee were using the same server at the time this report was filed. This
            provides additional confidence (although not a guarantee) that any video evidence submitted alongside the report was not
            faked using a hacked client.

            Distance is provided in meters, rounded to the nearest meter. One meter in Minecraft is equal to the length of a block.
        summary:
          type: string
          description: brief message for staff members watching the player
      required:
      - id
      - server_network_id
      - server_network_name
      - accuser
      - accusee
      - status
      - created_at_millis
    CreateWatchRequestInput:
      properties:
        server_network_id:
          type: integer
          format: int64
          description: internal ID of the server network (this is NOT inferred from
            the session!)
        server_group_id:
          type: integer
          format: int64
          description: internal ID of the server group (optional, but helpful to reviewers)
        accusee_uuid:
          "$ref": "#/components/schemas/PlayerUuid"
        summary:
          type: string
          description: brief message for staff members watching the player
        in_game_distance:
          type: integer
          format: int32
          description: |
            If provided, this means that the accuser and accusee were using the same server at the time this report was filed. This
            provides additional confidence (although not a guarantee) that any video evidence submitted alongside the report was not
            faked using a hacked client.

            Distance is provided in meters, rounded to the nearest meter. One meter in Minecraft is equal to the length of a block.
      required:
      - server_network_id
      - accusee_uuid
    ResolveWatchRequestInput:
      properties:
        status:
          type: string
          enum:
          - CLOSED_MANUAL
          - CLOSED_RULEBREAKING
          - CLOSED_NOT_RULEBREAKING
          description: |
            - `CLOSED_MANUAL`: close the report without indicating whether the player was cheating,
              typically because it is too old or otherwise inactionable
            - `CLOSED_RULEBREAKING`: the player was found to be breaking the rules
            - `CLOSED_NOT_RULEBREAKING`: the player was found NOT to be breaking the rules
        resolve_similar_reports:
          type: boolean
          description: 'Whether other reports with the same accusee should also be
            closed with the same status.

            '
      required:
      - status
      - resolve_similar_reports
    Reports:
      properties:
        accusations:
          type: array
          items:
            "$ref": "#/components/schemas/AccusationBasicInfo"
        watch_requests:
          type: array
          items:
            "$ref": "#/components/schemas/WatchRequest"
      required:
      - accusations
      - watch_requests
    AccusationBasicInfo:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID of the accusation
        server_network_id:
          type: integer
          format: int64
          description: internal ID of the server network on which the accusation was
            filed
        server_network_name:
          type: string
          description: display name of the server network
        server_group_id:
          type: integer
          format: int64
          description: internal ID of the server group on which the accusation was
            filed (optional)
        server_group_name:
          type: string
          description: name of the server group on which the accusation was filed
            (present only if `server_group_id` is)
        accuser:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        accusee:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        status:
          type: string
          enum:
          - NOT_SUBMITTED
          - SUBMITTED
          - CLOSED
          - CONFLICTING_VERDICTS
          - REPORTER_CLAIMS_INCONCLUSIVE
          - CLOSED_EARLY
          description: |
            Enum indicating the status of the report:

            The following may be characterized as "pending submission":
            - NOT_SUBMITTED: report has not been submitted for review yet

            The following may be characterized as "in review":
            - SUBMITTED: submitted and available for review
            - CONFLICTING_VERDICTS: flagged for review because reviewers disagreed on the verdict

            The following may be characterized as "closed" (terminal statuses):
            - CLOSED: a consensus verdict was offered on the report
            - REPORTER_CLAIMS_INCONCLUSIVE: the reporter knows that their report does not provide enough evidence to warrant punishment
            - CLOSED_EARLY: the report was closed either by the reporter or by staff before a verdict could be given
        overall_verdict:
          "$ref": "#/components/schemas/AccusationVerdict"
        created_at_millis:
          type: integer
          format: int64
          description: epoch time at which the accusation was issued
        closed_at_millis:
          type: integer
          format: int64
          description: epoch time at which the accusation was closed (optional)
        time_of_event:
          type: integer
          format: int64
          description: The approximate time at which the accusee may have been breaking
            the rules
        in_game_distance:
          type: integer
          format: int32
          description: |
            If provided, this means that the accuser and accusee were using the same server at the time this report was filed. This
            provides additional confidence (although not a guarantee) that any video evidence submitted alongside the report was not
            faked using a hacked client.

            Distance is provided in meters, rounded to the nearest meter. One meter in Minecraft is equal to the length of a block.
        ruling_times:
          type: array
          description: the epoch times at which reviews were submitted for the accusation
          items:
            type: integer
            format: int64
        includes_video_evidence:
          type: boolean
          description: whether the reporter included video evidence
      required:
      - id
      - server_network_id
      - server_network_name
      - accuser
      - accusee
      - status
      - created_at_millis
    AccusationInDepthInfo:
      allOf:
      - "$ref": "#/components/schemas/AccusationBasicInfo"
      - type: object
        properties:
          summary:
            type: string
            description: user-provided summary of the accusation
          video_evidence:
            type: array
            items:
              "$ref": "#/components/schemas/YouTubeVideoEvidence"
          rulings:
            description: |
              List of rulings with verdicts by various staff members. This list will not include the actual verdict of
              each reviewer until evaluation has completed, even if one or more rulings have been offered.
            type: array
            items:
              "$ref": "#/components/schemas/AccusationRuling"
          review_permits:
            description: |
              List of rulings with verdicts by various staff members. This list will not include the actual verdict of
              each reviewer until evaluation has completed, even if one or more rulings have been offered.
            type: array
            items:
              "$ref": "#/components/schemas/AccusationReviewPermit"
        required:
        - video_evidence
        - rulings
        - review_permits
    YouTubeVideoEvidence:
      allOf:
      - "$ref": "#/components/schemas/YouTubeVideoMetadata"
      - type: object
        properties:
          start_time_seconds:
            type: integer
            format: int32
            description: time in seconds at which the reviewer should begin watching
          end_time_seconds:
            type: integer
            format: int32
            description: time in seconds at which the reviewer should stop watching
        required:
        - start_time_seconds
        - end_time_seconds
    AccusationRuling:
      properties:
        ruler:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        verdict:
          "$ref": "#/components/schemas/AccusationVerdict"
        comment:
          type: string
          description: comment about the verdict, if the ruler provided one
        override_power:
          type: boolean
          description: |
            Whether this verdict should be seen as overriding the others. If two overriding
            verdicts exist, then the most recent one prevails. Only admins and owners can
            issue an overriding verdict.
        issued_at_millis:
          type: integer
          format: int64
          description: epoch time (millis) at which the verdict was issued
      required:
      - ruler
      - issued_at_millis
    AccusationReviewPermit:
      properties:
        ruler:
          "$ref": "#/components/schemas/CursoryPlayerInfo"
        created_at_millis:
          type: integer
          format: int64
          description: epoch time (millis) at which the verdict was issued
        expires_at_millis:
          type: integer
          format: int64
          description: epoch time (millis) at which the verdict expires
      required:
      - ruler
      - created_at_millis
      - expires_at_millis
    BaseAccusationInput:
      properties:
        server_network_id:
          type: integer
          format: int64
          description: internal ID of the server network (this is NOT inferred from
            the session!)
        server_group_id:
          type: integer
          format: int64
          description: internal ID of the server group (optional, but helpful to reviewers)
        accusee_uuid:
          "$ref": "#/components/schemas/PlayerUuid"
        summary:
          type: string
          description: the user-provided summary of the accusation
        video_evidence:
          type: array
          items:
            "$ref": "#/components/schemas/VideoEvidenceInput"
        status:
          type: string
          enum:
          - NOT_SUBMITTED
          - SUBMITTED
          - REPORTER_CLAIMS_INCONCLUSIVE
          description: |
            Enum indicating the initial status of the report:

            - NOT_SUBMITTED: user will come back and finish the report later
            - SUBMITTED: report is available for review
            - REPORTER_CLAIMS_INCONCLUSIVE: the reporter knows that their report does not provide
              enough evidence to warrant punishment. When the accusation author "closes" their
              report, this is the status to use. The `close_accusation` endpoint is for staff only.
        time_of_event:
          type: integer
          format: int64
          description: The approximate time at which the accusee may have been breaking
            the rules
      required:
      - server_network_id
      - accusee_uuid
      - status
    CreateAccusationInput:
      allOf:
      - "$ref": "#/components/schemas/BaseAccusationInput"
      - type: object
        properties:
          in_game_distance:
            type: integer
            format: int32
            description: |
              If provided, this means that the accuser and accusee were using the same server at the time this report was filed. This
              provides additional confidence (although not a guarantee) that any video evidence submitted alongside the report was not
              faked using a hacked client.

              Distance is provided in meters, rounded to the nearest meter. One meter in Minecraft is equal to the length of a block.

              Only include this field for reports submitted from a Minecraft server.
    VideoEvidenceInput:
      properties:
        video_id:
          type: string
          description: the external ID of the YouTube video (found in the video URL)
        start_time_seconds:
          type: integer
          format: int32
          description: The time in seconds at which the reviewer should begin watching.
            Defaults to 0.
        end_time_seconds:
          type: integer
          format: int32
          description: Time in seconds at which the reviewer should stop watching.
            Defaults to the full video length.
      required:
      - video_id
    UpdateAccusationInput:
      allOf:
      - "$ref": "#/components/schemas/BaseAccusationInput"
    UpdateAccusationResponse:
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - STATUS_CHANGED
          - REVIEW_IN_PROGRESS
          description: |
            The status of the update request, which may indicate soft failure due to a change
            in the accusation state made by another user.
            - SUCCESS: update was successful
            - STATUS_CHANGED: accuation no longer has a status that permits updates
            - REVIEW_IN_PROGRESS: review began while the user was making edits, meaning it's
              no longer possible to accept those edits
        accusation:
          "$ref": "#/components/schemas/AccusationInDepthInfo"
      required:
      - accusation
      - status
    CreateAccusationRulingInput:
      properties:
        verdict:
          "$ref": "#/components/schemas/AccusationVerdict"
        comment:
          type: string
          description: |
            An optional brief comment to go along with the verdict that will be seen by other
            staff members as well as the accuser once review is complete.
      required:
      - verdict
    CreateAccusationRulingResponse:
      properties:
        consumer_action:
          type: string
          enum:
          - SUGGEST_PUNISHMENT
          - ALERT_CLOSED
          - NOTHING
          description: |
            This indicates what the consuming application should direct the reviewer to do:

            - SUGGEST_PUNISHMENT: provide a link to the player's profile so that the user can issue a
              punishment (if needed; the accusee might already have been punished for something else)
            - ALERT_CLOSED: alert the user the accusation was closed during review, so it wasn't possible to issue a verdict
            - NOTHING: no further instructions for the user

            This summary is provided for the consumer's convenience. All of this information may be
            derived from the updated `accusation` field.
        accusation:
          "$ref": "#/components/schemas/AccusationInDepthInfo"
      required:
      - consumer_action
      - accusation
    InitAccusationReviewInput:
      properties:
        accusation_id:
          type: integer
          format: int64
          description: |
            The internal ID of the report the user wants to review. Leave this blank to select a
            random one.
    InitAccusationReviewResponse:
      properties:
        permit_reservation_status:
          type: string
          enum:
          - SUCCESS
          - NO_REVIEW_NEEDED
          - NO_PERMITS_AVAILABLE
          - STATUS_CHANGED
          description: |
            The status of the request, which may indicate a "soft" failure that the client had
            no way to anticipate. If the status is something other than SUCCESS, provide a
            specific error message in the UI and do not proceed with the reviewing process.
            If the user requested to review a specific accusation, then that accusation will
            always be included in the payload here. The front end should use that data to
            refresh the state of the app so that it's clear why the user cannot review this
            accusation.

            - SUCCESS: permit reserved successfully
            - NO_REVIEW_NEEDED: no accusations currently need review
            - NO_PERMITS_AVAILABLE: the permit pool is empty, probably because another user
              grabbed one very recently.
            - STATUS_CHANGED: the accusation cannot be reviewed because its status changed, probably
              very recently.
        permit_id:
          type: integer
          format: int64
          description: |
            The internal ID of the permit reserved that will allow the user to submit a verdict.
            You will need this ID to return the permit to the pool if the user cancels their
            review.
        accusation:
          "$ref": "#/components/schemas/AccusationInDepthInfo"
      required:
      - permit_reservation_status
    AccessConfiguration:
      properties:
        permission_templates:
          type: array
          items:
            "$ref": "#/components/schemas/PermissionTemplate"
        role_templates:
          type: array
          items:
            "$ref": "#/components/schemas/RoleTemplate"
        permission_groups:
          type: array
          items:
            "$ref": "#/components/schemas/PermissionGroup"
      required:
      - permissions
      - role_templates
      - permission_groups
    PermissionTemplate:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID of the permission template
        name:
          type: string
          description: |
            The technical name of the permission. This is what is assigned to each player within
            a Minecraft server via the Spigot API.
        display_name:
          type: string
          description: display name of the permission
        description:
          type: string
          description: description of the permission, if provided by the user who
            configured it
        granted_by_default:
          type: boolean
          description: whether the permission is granted to players by default
        server_scoping:
          type: string
          enum:
          - SERVER_SCOPED
          - SERVER_SCOPEABLE
          - NOT_SERVER_SCOPEABLE
          description: |
            Permissions that are server scopeable may be applied on specific server groups as
            well as throughout a server network.

            - `SERVER_SCOPED`: currently assigned to one or more specific server groups, either
              directly or as part of a role
            - `SERVER_SCOPEABLE`: not currently assigned to a server group, but theoretically could be
            - `NOT_SERVER_SCOPEABLE`: cannot be scoped to individual server groups
        built_in:
          type: boolean
          description: |
            Whether the permission is managed by the service itself. Built-in permissions cannot be
            edited.
      required:
      - name
      - display_name
      - granted_by_default
      - server_scoping
      - built_in
    RoleTemplateBase:
      properties:
        id:
          type: integer
          format: int64
          description: Unique integer representing the role's internal ID
        display_name:
          type: string
          description: display name of the role
        description:
          type: string
          description: description of the role, if provided by the user who configured
            it
        granted_by_default:
          type: boolean
          description: whether the role is granted to players by default
        server_scoping:
          type: string
          enum:
          - SERVER_SCOPED
          - SERVER_SCOPEABLE
          - NOT_SERVER_SCOPEABLE
          description: |
            Roles that are server scopeable may be applied on specific server groups as well as
            throughout a server network. Roles are server scopeable only if all of their permissions are
            server scopeable.

            - `SERVER_SCOPED`: currently assigned to one or more specific server groups. Roles that are
              currently server scoped can only have server scopeable permissions.
            - `SERVER_SCOPEABLE`: not currently assigned to a server group, but theoretically could be.
              There are no restrictions on how roles with this status may be configured.
            - `NOT_SERVER_SCOPEABLE`: cannot be scoped to individual server groups because one or more
              of its permissions are not server scopeable
        built_in:
          type: boolean
          description: 'Whether the role is managed by the service itself. Built-in
            roles cannot be edited.

            '
      required:
      - id
      - display_name
      - granted_by_default
      - server_scoping
      - built_in
    RoleTemplate:
      allOf:
      - "$ref": "#/components/schemas/RoleTemplateBase"
      - type: object
        properties:
          permissions:
            type: array
            items:
              type: integer
              format: int64
              description: 'the internal IDs of all permissions associated with this
                role, in no particular order

                '
      required:
      - permissions
    RoleTemplateExpanded:
      allOf:
      - "$ref": "#/components/schemas/RoleTemplateBase"
      - type: object
        properties:
          permissions:
            type: array
            items:
              "$ref": "#/components/schemas/PermissionTemplate"
      required:
      - permissions
    PermissionGroup:
      properties:
        id:
          type: integer
          format: int64
          description: internal ID of the permission group
        display_name:
          type: string
          description: display name of the permission group (has no programmatic significance)
        built_in:
          type: boolean
          description: |
            Whether the permission group is managed by the service itself. Built-in permission groups cannot
            be edited.
        election_status:
          type: string
          enum:
          - ELECTED
          - UNIVERSALLY_ELECTED
          - NOT_ELECTED
          description: |
            Some permission groups are built-in, whereas others are configured by server networks for their
            own use cases. The user configuring permissions for a server network may "elect" a built-in
            permission group, indicating that the server network can use this group to more easily assign
            permissions to players. Some permission groups, like built-in staff permission groups, are
            elected automatically. Others, like built-in groups for custom plugins customers may or may not
            be using, require manual election.

            Permission groups have no programmatic significance. They just make it easier to display
            permissions nicely in a UI.

            - ELECTED: customer has manually elected this permission group
            - UNIVERSALLY_ELECTED: this permission group is always elected and cannot be un-elected
            - NOT_ELECTED: customer has not manually elected this permission group, but may choose to
        omnipermission:
          type: integer
          format: int64
          description: |
            The internal ID of the permission encompassing the entire group. Each group may have no more
            than one omnipermission.
        permissions:
          type: array
          items:
            type: integer
            format: int64
            description: IDs of permissions within the first layer of this permission
              group
        subgroups:
          type: array
          items:
            "$ref": "#/components/schemas/PermissionSubgroup"
      required:
      - id
      - display_name
      - built_in
      - election_status
      - permissions
      - subgroups
    PermissionSubgroup:
      properties:
        omnipermission:
          type: integer
          format: int64
          description: |
            The internal ID of the permission encompassing the entire subgroup. Unlike top-level
            permission groups, Subgroups are guaranteed to have an omnipermission.
        permissions:
          type: array
          items:
            type: integer
            format: int64
            description: IDs of permissions within this subgroup
        subgroups:
          type: array
          items:
            "$ref": "#/components/schemas/PermissionSubgroup"
      required:
      - omnipermission
      - permissions
      - subgroups
    ConfigurePermissionsInput:
      properties:
        permissions:
          type: array
          items:
            "$ref": "#/components/schemas/PermissionTemplateInput"
      required:
      - permissions
    NewPermissionTemplate:
      properties:
        name:
          type: string
          description: |
            The technical name of the permission. This is what is assigned to each player within
            a Minecraft server via the Spigot API.
        display_name:
          type: string
          description: display name of the permission
        description:
          type: string
          description: description of the permission, if provided by the user who
            configured it
        granted_by_default:
          type: boolean
          description: whether the permission is granted to players by default
        server_scopeable:
          type: boolean
          description: |
            Whether the permission may be scoped to specific servers. If false, when it's assigned,
            it will always apply to all servers within the network as well as the website.

            Roles are server scopeable if and only if all associated permissions are server scopeable.
            This field is provided as a convenience even though the consumer could derive it.
      required:
      - name
      - display_name
      - granted_by_default
      - server_scopeable
    PermissionTemplateInput:
      allOf:
      - "$ref": "#/components/schemas/NewPermissionTemplate"
      - type: object
        properties:
          id:
            type: integer
            format: int64
            description: internal ID of the permission (only include this for permissions
              being updated)
    CreateOrUpdateRoleInput:
      properties:
        display_name:
          type: string
          description: display name of the role
          minLength: 1
        description:
          type: string
          description: description of the role
        granted_by_default:
          type: boolean
          description: whether the role should be granted to players by default
        permissions:
          type: array
          items:
            type: integer
            format: int64
            description: internal ID of a permission to associate with the role
      required:
      - display_name
      - granted_by_default
      - permissions
    PermissionAssignment:
      type: string
      enum:
      - ASSIGNED
      - REVOKED
      - NONE
      description: |
        How a permission is associated with a player.

        - `ASSIGNED`: permission is assigned directly to the player (i.e. not just as part of a role)
        - `REVOKED`: permission is revoked directly from the player
        - `NONE`: permission is neither assigned to nor revoked from the player (a logical no-op)
    AuditPlayerPermissionResponse:
      properties:
        default_permission:
          type: boolean
          description: whether the permission is assigned by default
        default_roles:
          type: array
          description: list of the IDs of all roles that are assigned by default and
            include the permission
          items:
            type: integer
            format: int64
        unscoped_roles:
          type: array
          description: |
            list of the IDs of all unscoped roles that are assigned directly to the player and include the
            permission
          items:
            type: integer
            format: int64
        scoped_roles:
          type: array
          description: |
            A list of the IDs of all roles that are assigned directly to the player, scoped to one or more
            specific servers rather than the whole network, and include the permission.

            Will be null if permission does not support server scoping.
          items:
            type: integer
            format: int64
        unscoped_permission_assignment:
          description: describes how the permission is assigned to the player throughout
            the network
          "$ref": "#/components/schemas/PermissionAssignment"
        scoped_permission_assignment:
          description: |
            Describes how the permission is assigned to the player on a specific server.

            Will be null if permission does not support server scoping.
          "$ref": "#/components/schemas/PermissionAssignment"
        expected_assignment:
          type: boolean
          description: |
            Whether the player is expected to have the permission based on the configuration logic. This
            parameter is just here for convenience, since it can be derived from the other data.
        cached_assignment:
          type: boolean
          description: |
            Whether the permissions cache believes the player should have this permission. This is what
            will actually be applied in practice. If this value contradicts the expected assignment,
            that probably means the cache hasn't refreshed yet. Advise the user to wait a minute or so
            and then have the player login again.
      required:
      - default_permission
      - default_roles
      - unscoped_roles
      - unscoped_permission_assignment
      - expected_assignment
      - cached_assignment
    PermissionGroupInput:
      properties:
        display_name:
          type: string
          description: display name of the permission group
        elected:
          type: boolean
          description: 'If a permission group is "elected", it will be visible in
            the permissions assignment UI.

            '
        omnipermission:
          type: integer
          format: int64
          description: |
            An "omnipermission" is a permission within a permission group that, if assigned, will
            provide all of the same privileges to the user as would assigning each and every other
            permission within the group individually. Subgroups can also have omnipermissions.

            If an omnipermission is specified, it need not be included in the `permissions` array.
            The same goes for permissions within a subgroup.
        permissions:
          type: array
          items:
            type: integer
            format: int64
            description: |
              List of permission IDs to include in the permission group. It is not necessary to
              include the omnipermission here if one is selected.
        subgroups:
          type: array
          items:
            "$ref": "#/components/schemas/PermissionSubgroupInput"
      required:
      - display_name
      - elected
      - permissions
      - subgroups
    PermissionSubgroupInput:
      properties:
        omnipermission:
          type: integer
          format: int64
          description: an omnipermission that only applies to permissions within the
            subgroup
        permissions:
          type: array
          items:
            type: integer
            format: int64
            description: |
              List of permission IDs to include in the permission subgroup. Permissions that
              are included here do not need to be listed within the top-level permission group.
        subgroups:
          type: array
          items:
            "$ref": "#/components/schemas/PermissionSubgroupInput"
      required:
      - onipermission
      - permissions
      - subgroups
    AssignedPermissionsAndRoles:
      properties:
        permissions:
          type: array
          items:
            "$ref": "#/components/schemas/Permission"
        roles:
          type: array
          items:
            "$ref": "#/components/schemas/Role"
      required:
      - permissions
      - roles
    Permission:
      properties:
        permission_template_id:
          type: integer
          format: int64
          description: internal ID of the permission template assigned to the player
        granted:
          type: boolean
          description: 'Whether the permission has been granted to or revoked from
            the player.

            '
        server_groups:
          type: array
          items:
            type: integer
            format: int64
            description: |
              The internal IDs of server groups on which this permission applies. If
              empty, that means the permission applies to all servers.
      required:
      - permission_template_id
      - granted
      - server_groups
    Role:
      properties:
        role_template_id:
          type: integer
          format: int64
          description: internal ID of the role template assigned to the player
        server_groups:
          type: array
          items:
            type: integer
            format: int64
            description: |
              The internal IDs of server groups on which this role applies. If empty,
              that means the role applies to all servers.
      required:
      - role_template_id
      - server_groups
    PlayerGroupPermissions:
      properties:
        permissions:
          type: array
          items:
            type: string
            description: technical names of permissions assigned to the player
      required:
      - permissions
    AssignPlayerPermissionsInput:
      properties:
        permissions:
          type: array
          items:
            "$ref": "#/components/schemas/Permission"
      required:
      - permissions
    ClonePlayerPermissionsInput:
      properties:
        target_player_id:
          type: integer
          format: int64
          description: the player's internal ID
      required:
      - target_player_id
    AssignPlayerRoleInput:
      properties:
        server_groups:
          type: array
          items:
            type: integer
            format: int64
            description: internal ID of a server group
      required:
      - server_groups
    ServerJoinEventInput:
      properties:
        uuid:
          "$ref": "#/components/schemas/PlayerUuid"
        username:
          "$ref": "#/components/schemas/PlayerUsername"
        ip_address:
          "$ref": "#/components/schemas/IPv4Address"
        server_id:
          type: integer
          format: int64
          description: |
            The internal ID of the Minecraft server making this request. The server knows its ID
            from the response to `emit_initial_heartbeat`.
        time_millis:
          type: integer
          format: int64
          description: |
            Current epoch time. The API needs this to address race conditions, e.g. when a player
            switches servers, the request indicating that they are starting a new session might
            arrive before the one that says they are leaving the previous one.
      required:
      - uuid
      - username
      - ip_address
      - server_id
      - time_millis
    ServerJoinEventResponse:
      properties:
        ban:
          "$ref": "#/components/schemas/BanOrMute"
          description: |
            If this field is present, then the player is banned and the server will end up kicking
            the player.

            If the player has multiple bans, then this will be the longest and most relevant one.
        mute:
          "$ref": "#/components/schemas/BanOrMute"
          description: |
            If this field is present, then the player is muted and the server should prevent them
            from communicating in chat.

            If the player has multiple mutes, then this will be the longest and most relevant one.
        warning:
          "$ref": "#/components/schemas/Warning"
          description: |
            If this field is present, then the player should be kicked with the provided message.
            The player will be able to rejoin the next time they try to login.
        permissions:
          type: array
          description: A list of permissions assigned to the user on this server.
          items:
            type: string
        player_id:
          type: integer
          format: int64
          description: The player's internal ID, which will be used for all API requests.
      required:
      - permissions
      - player_id
    AckableWarning:
      properties:
        id:
          type: integer
          format: int64
          description: Internal ID of the warning. Use this when calling `acknowledge_warning`.
        reason:
          type: string
          description: |
            The reason for the mute. This field is displayed literally, regardless of how the warning
            message template is configured.
        server_network_name:
          type: string
          description: Display name of the server network on which the formal warning
            was issued.
        created_at_millis:
          type: integer
          format: int64
          description: Epoch time at which the warning was issued
      required:
      - id
      - server_network_name
      - created_at_millis
    ServerLeaveEventInput:
      properties:
        player_id:
          type: integer
          format: int64
          description: The player's internal ID
        server_id:
          type: integer
          format: int64
          description: |
            The internal ID of the Minecraft server making this request. The server knows its ID
            from the response to `emit_initial_heartbeat`.
        time_millis:
          type: integer
          format: int64
          description: |
            Current epoch time. The API needs this to address race conditions, e.g. when a player
            switches servers, the request indicating that they are starting a new session might
            arrive before the one that says they are leaving the previous one.
      required:
      - player_id
      - server_id
      - time_millis
    AssignInvalidPlayersInput:
      properties:
        number_of_players:
          type: integer
          format: int32
          maximum: 50
          description: number of players to assign
      required:
      - number_of_players
    InvalidPlayer:
      properties:
        id:
          type: integer
          format: int64
          description: the player's ManageMC ID
        uuid:
          "$ref": "#/components/schemas/PlayerUuid"
        username:
          "$ref": "#/components/schemas/PlayerUsername"
        username_known_at:
          type: integer
          format: int64
          description: |
            If the player was part of a punishment import and does not have a UUID assigned,
            this field will be the most recent creation timestamp among imported punishments
            that reference this player.
      required:
      - id
    InvalidPlayerInfo:
      properties:
        total:
          type: integer
          format: int32
          description: total number of players that are invalid and/or lack UUIDs
        assigned_players:
          type: array
          items:
            "$ref": "#/components/schemas/InvalidPlayer"
      required:
      - total
      - assigned_players
  responses:
    NoOpResponse:
      description: no-op response
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/EmptyResponse"
    UnauthenticatedError:
      description: |
        This means that an access token (JWT) is required, but that one of the following is true:

        - the user did not provide one
        - the user provided one, but it is wrong
        - the user provided one, and it was correct at one point, but it has expired
        - the user's session was terminated early

        The message in the response body will not reveal the specific cause of auth failure.
        Consuming applications should respond to this error by logging the user out.
    PermissionDeniedError:
      description: |
        This error may be raised to users of the following types who do not have permission to
        interact with this endpoint:

        - web users
        - mobile users
        - players on an externally-hosted Minecraft server

        The most common reason for access forbiddance is that the user is missing permissions,
        but it's also possible that the entire server network is locked, e.g. due to delinquency.
        In addition, this status code may indicate that the active user is not operating as a
        player for endpoints that require an active player.

        A player's permissions are provided in the `fetch_active_user` endpoint, so the client
        should avoid calling endpoints that are known to be forbidden. The client should also
        clearly mark actions that are forbidden, or hide them entirely from the user. When the
        user refreshes the page, the client should call `fetch_active_user` again so that the
        user's permissions are refreshed.

        Check the `x-permissions` field in the API definition for the list of permission(s) that
        would satisfy the permissioning requirement. If more than one permission is listed, that
        means that *any one* of those permissions satisfies the requirement, not that more than
        one permission is needed.
    SyntaxError:
      description: |
        This means that the request body, path parameter(s) or query parameter(s) provided
        by the consumer do not conform to the specification defined here.

        Common examples include:

        - skipping a required parameter
        - providing an unsupported parameter
        - providing the wrong data type (e.g. string instead of array)
        - providing a string that is longer than the maximum allowed value

        All endpoints that accept path, body, or query parameters have the potential to throw
        this error.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: A brief description of what was wrong with the user input
              bad_user_input:
                type: string
                description: The user input that violated the API specification, if
                  applicable
              field:
                type: string
                description: |
                  A description of the field for which validation was performed. For nested JSON
                  objects, this will include the path through that object to the offending field.
            required:
            - message
paths:
  "/health":
    get:
      operationId: health
      summary: Unauthenticated health check endpoint
      tags:
      - Ping
      responses:
        200:
          description: the health check
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HealthCheck"
  "/ping":
    get:
      operationId: ping
      summary: Simple authenticated ping endpoint
      tags:
      - Ping
      security:
      - external_minecraft: []
      - internal_minecraft: []
      - user_web: []
      - user_mobile: []
      - user_minecraft: []
      description: |
        This is typically for testing credentials. It accepts all forms of authentication. Use the
        unauthenticated /health endpoint instead to check whether the API is alive.
      responses:
        200:
          description: the message "pong!"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PingPong"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
  "/player_tokens":
    post:
      operationId: generate_player_token
      summary: Returns a JWT for a player
      tags:
      - Authentication
      security:
      - external_minecraft: []
      description: |
        Generate an auth token for players on game servers hosted by external parties. Players
        do not "login" to ManageMC when playing on game servers; rather, we allow server
        hosts to authenticate players to themselves. The resulting JWT will contain metadata
        associating it with the server host, making it impossible for the player to access data
        belonging to other customers.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/GeneratePlayerTokenInput"
      responses:
        200:
          description: a JWT
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserAuthToken"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player_uuid parameter is missing
            - player not found
            - the server network was deleted
            - auth payload does not contain server_group_id
  "/external_service_tokens":
    post:
      operationId: generate_external_service_token
      summary: Returns a JWT for an external application to use
      tags:
      - Authentication
      description: |
        Generate an auth token for an application to use in subsequent requests. This
        endpoint is essentially a "login" endpoint, in which public/private key
        credentials are provided in the request body rather than in the authentication
        header.

        The consumer provides the name of the server group, and the API will provide
        the ID of the group in the token payload. The server group will be created
        if it doesn't exist already.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/GenerateExternalServiceTokenInput"
      responses:
        200:
          description: a JWT (or, if the credentials were wrong, an empty response)
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApplicationAuthToken"
        400:
          "$ref": "#/components/responses/SyntaxError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - the server network was deleted
  "/internal_service_tokens":
    post:
      operationId: generate_internal_service_token
      summary: Returns a JWT for an internal application to use
      tags:
      - Authentication
      description: |
        Generate an auth token for an application to use in subsequent requests. This
        endpoint is essentially a "login" endpoint, in which public/private key
        credentials are provided in the request body rather than in the authentication
        header.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/GenerateInternalServiceTokenInput"
      responses:
        200:
          description: a JWT (or, if the credentials were wrong, an empty response)
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ApplicationAuthToken"
        400:
          "$ref": "#/components/responses/SyntaxError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
  "/external_minecraft_keys":
    get:
      operationId: fetch_external_minecraft_keys
      summary: Fetch active external credentials
      tags:
      - External Minecraft Keys
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.apikeys.view
      description: |
        Fetch all active API keys for a server. These are not JWTs; these are the credentials
        used to request external JWTs. They never expire but also cannot be used for anything
        other than requesting external JWTs.

        The private key is only visible to the user when initially created. If a user loses
        an external key, they need to generate a new one and keep better track of it.

        No more than 10 external keys can exist at once for the same server network.
      responses:
        200:
          description: External API key details
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ExternalMinecraftKey"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
    post:
      operationId: create_external_minecraft_key
      summary: Generate a new external API key for Minecraft
      tags:
      - External Minecraft Keys
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.apikeys.create
      description: |
        Admins/owners may generate up to 10 new API keys for their external servers to use. This
        endpoint generates a new one. Only after calling this endpoint will the private key ever
        be visible.

        API keys never expire, but can be manually disabled.

        If a customer's server network is "locked", such as due to failure to pay bills, this
        endpoint will reject requests.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateExternalMinecraftKeyInput"
      responses:
        200:
          description: A new API key (including a private key)
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateExternalMinecraftKeyResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - 10 API keys are already active for this server
            - name field is missing or blank
  "/external_minecraft_keys/{id}":
    patch:
      operationId: update_external_minecraft_key
      summary: Update external Minecraft credentials
      tags:
      - External Minecraft Keys
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.apikeys.create
      description: 'Admins/owners may update the name field on an external Minecraft
        key.

        '
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateExternalMinecraftKeyInput"
      responses:
        200:
          description: The updated API key
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ExternalMinecraftKey"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - api key not found
            - api key belongs to a different server network
            - name field is missing or blank
    delete:
      operationId: disable_external_minecraft_key
      summary: Disable an external Minecraft key
      tags:
      - External Minecraft Keys
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.apikeys.create
      description: |
        This action is permanent. Admins should only disable a key if they are certain it's
        not in use. The web/mobile apps should provide a warning if the key was used recently.

        Disabling a key that's actively in use is still permitted because it's possible that
        the key was stolen and/or is being misused.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          format: int64
        required: true
        description: the internal ID of the key
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - api key does not exist
            - api key belongs to a different server network
  "/punishment_imports":
    get:
      operationId: fetch_punishment_imports
      summary: List cursory information about all punishment imports for a server
      tags:
      - Onboarding
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.imports.view
      description: 'Fetch status and metadata about all punishment imports, including
        cancelled ones.

        '
      responses:
        200:
          description: list of punishment imports sorted by creation time, ascending
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PunishmentImport"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
    post:
      operationId: initiate_punishment_import
      summary: Create a punishment import
      tags:
      - Onboarding
      security:
      - external_minecraft: []
      x-rollback: false
      description: |
        Create a persistent record representing a punishment import. This reference will allow
        consumers to add punishments to a given import and then modify those punishments collectively
        after the fact. An import can also be cancelled, which archives all punishments associated
        with it.
      responses:
        200:
          description: the newly created import
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PunishmentImport"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
  "/punishment_imports/{id}/actions/add_bans":
    post:
      operationId: import_bans
      summary: Add bans to an existing punishment import
      tags:
      - Onboarding
      security:
      - external_minecraft: []
      description: |
        After a punishment import is created, consumers may add punishments of various types to the
        import. Those punishments will be associated with the import and may be mass-edited after
        the import is complete. This endpoint creates bans.

        Only in-progress imports accept punishments.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ImportableBans"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - import not found
            - import belongs to a different server network
            - import status is anything other than IN_PROGRESS
            - offender, issuer, or pardoner has neither username nor UUID
            - issued_at_millis or pardoned_at_millis is not in range 17 May, 2009 -> present
            - pardoned_at_millis is before issued_at_millis
  "/punishment_imports/{id}/actions/add_mutes":
    post:
      operationId: import_mutes
      summary: Add mutes to an existing punishment import
      tags:
      - Onboarding
      security:
      - external_minecraft: []
      description: |
        After a punishment import is created, consumers may add punishments of various types to the
        import. Those punishments will be associated with the import and may be mass-edited after
        the import is complete. This endpoint creates mutes.

        Only in-progress imports accept punishments.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ImportableMutes"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - import not found
            - import belongs to a different server network
            - import status is anything other than IN_PROGRESS
            - offender, issuer, or pardoner has neither username nor UUID
            - issued_at_millis or pardoned_at_millis is not in range 17 May, 2009 -> present
            - pardoned_at_millis is before issued_at_millis
  "/punishment_imports/{id}/actions/add_warnings":
    post:
      operationId: import_warnings
      summary: Add warnings to an existing punishment import
      tags:
      - Onboarding
      security:
      - external_minecraft: []
      description: |
        After a punishment import is created, consumers may add punishments of various types to the
        import. Those punishments will be associated with the import and may be mass-edited after
        the import is complete. This endpoint creates warnings.

        Only in-progress imports accept punishments.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ImportableWarnings"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - import not found
            - import belongs to a different server network
            - import status is anything other than IN_PROGRESS
            - offender, issuer, or pardoner has neither username nor UUID
            - issued_at_millis or pardoned_at_millis is not in range 17 May, 2009 -> present
            - pardoned_at_millis is before issued_at_millis
  "/punishment_imports/{id}/actions/add_ip_bans":
    post:
      operationId: import_ip_bans
      summary: Add IP bans and range IP bans to an existing punishment import
      tags:
      - Onboarding
      security:
      - external_minecraft: []
      description: |
        After a punishment import is created, consumers may add punishments of various types to the
        import. Those punishments will be associated with the import and may be mass-edited after
        the import is complete. This endpoint creates IP bans and range IP bans.

        Only in-progress imports accept punishments.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ImportableIpBans"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - import not found
            - import belongs to a different server network
            - import status is anything other than IN_PROGRESS
            - issued_at_millis field is missing
            - issuer or pardoner has neither username nor UUID
            - issued_at_millis or pardoned_at_millis is not in range 17 May, 2009 -> present
            - pardoned_at_millis is before issued_at_millis
            - min_ipv4_address is greater than max_ipv4_address
  "/punishment_imports/{id}/actions/complete":
    post:
      operationId: complete_punishment_import
      summary: Complete a punishment import, preventing the future addition of punishment
        records
      tags:
      - Onboarding
      security:
      - external_minecraft: []
      description: |
        External consumer calls this endpoint after all intended records have been added to this
        punishment import. Only in-progress imports may be completed. Once an import is completed,
        the external consumer will not be able to add punishments to it.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: the updated import
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PunishmentImport"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - import not found
            - import belongs to a different server network
            - import is cancelled
  "/punishment_imports/{id}/actions/cancel":
    post:
      operationId: cancel_punishment_import
      summary: Cancel a punishment import
      tags:
      - Onboarding
      security:
      - user_web: []
      - user_mobile: []
      - external_minecraft: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.imports.manage
      description: |
        Any import may be cancelled. Cancellation causes all imported punishments to be deleted in a
        fully recoverable way.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: the updated import
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PunishmentImport"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - import not found
            - import belongs to a different server network
  "/punishment_imports/{id}/actions/restore":
    post:
      operationId: restore_punishment_import
      summary: Restore a cancelled punishment import
      tags:
      - Onboarding
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.imports.manage
      description: |
        This causes all of its punishments to be restored to their state at the time of cancellation.
        The import itself will be considered completed, meaning it's no longer possible to add
        punishments to it, even if it was in progress at the time of cancellation.

        If the import is not cancelled, then this action will have no effect.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: the updated import
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PunishmentImport"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - import not found
            - import belongs to a different server network
  "/punishment_imports/{id}/actions/update_visibility":
    post:
      operationId: update_imported_punishment_visibility
      summary: Update the visibility of punishments associated with an import
      tags:
      - Onboarding
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.imports.manage
      description: |
        By default, all punishments are public. However, customers might have imported some or
        all of their punishments by calling our API themselves rather than using our plugin, in
        which case it is possible for some punishments to have non-public visibility. This
        endpoint allows web/mobile users to switch all public punishments associated with a
        given import to private, or all private punishments to public.

        Punishments with shadow visibility will not change in either case. It is very risky to
        "shadowban" a player and  then reveal the punishment to them, so this is almost certainly
        the behavior the customer will intend.

        Similarly, punishments that do not have a visibility field (such as warnings) will not
        change.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateImportedPunishmentVisibilityInput"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - import not found
            - import belongs to a different server network
            - import is not completed
            - visibility not recognized
  "/server_networks":
    get:
      operationId: fetch_server_networks
      summary: Fetch cursory information about server networks
      tags:
      - Server Networks
      description: |
        A server network is a group of associated Minecraft servers owned by the same customer
        and typically, although not necessarily, marketed as belonging to or being managed by the
        same organization or company.

        This endpoint exposes cursory information about all server networks.
      responses:
        200:
          description: All server networks
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ServerNetworkForRegularUsers"
  "/active_server_network":
    get:
      operationId: fetch_active_server_network
      summary: Fetch the active server network.
      description: This provides more detail than GET /server_networks. Includes configuration.
      tags:
      - Server Networks
      security:
      - user_web: []
      - user_mobile: []
      - external_minecraft: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.overview.view
      responses:
        200:
          description: the active server network
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ServerNetwork"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
    patch:
      operationId: update_active_server_network
      summary: Update configurable attributes on the active server network
      tags:
      - Server Networks
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.overview.edit
      description: |
        Edit the name or public IP address of the server network. Neither of these has programmatic
        significance.

        Neither attribute is validated in any way, but only those that are at least one character
        long will actually be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateActiveServerNetworkInput"
      responses:
        200:
          description: the updated server network
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ServerNetwork"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
  "/active_server_network/accusation_config":
    get:
      operationId: fetch_accusation_config
      summary: Fetch the active server network's accusation config.
      tags:
      - Server Networks
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.accusations.view
      responses:
        200:
          description: accusation config
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccusationConfig"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
    put:
      operationId: update_accusation_config
      summary: Update accusation configuration
      tags:
      - Server Networks
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.accusations.edit
      description: 'Update the active server network''s accusation configuration.

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AccusationConfig"
      responses:
        200:
          description: the updated accusation config
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccusationConfig"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
  "/active_server_network/punishment_config":
    get:
      operationId: fetch_punishment_config
      summary: Fetch the active server network's punishment config.
      tags:
      - Server Networks
      security:
      - user_web: []
      - user_mobile: []
      - external_minecraft: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.punishments.view
      responses:
        200:
          description: punishment config
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PunishmentConfig"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
    put:
      operationId: update_punishment_config
      summary: Update punishment configuration
      tags:
      - Server Networks
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.punishments.edit
      description: 'Update the active server network''s punishment configuration.

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PunishmentConfig"
      responses:
        200:
          description: the updated punishment config
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PunishmentConfig"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - one of the punishment message templates contains an unsupported variable
            - one of the punishment message templates is missing a required variable
  "/active_server_network/server_groups":
    get:
      operationId: fetch_expanded_server_groups
      summary: Fetch all server groups configured for active server network (for privileged
        consumers)
      tags:
      - Server Groups
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.servers.view
      description: |
        Server groups are logical groupings of game servers. They are configured by customers.
        We use them as a scope for punishments, statistics, and more (example use case: ban a player
        from all Capture the Flag servers, but allow them to play on the other ones).
      responses:
        200:
          description: a list of server groups
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ServerGroup"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
  "/server_networks/{id}/server_groups":
    get:
      operationId: fetch_server_groups
      summary: Fetch all server groups configured for active server network (for general
        consumers)
      tags:
      - Server Groups
      security:
      - user_web: []
      - user_mobile: []
      - external_minecraft: []
      description: |
        Server groups are logical groupings of game servers. They are configured by customers.
        We use them as a scope for punishments, statistics, and more (example use case: ban a player
        from all Capture the Flag servers, but allow them to play on the other ones).

        This endpoint has no access restriction and only retrieves cursory details about server
        groups.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: a list of server groups
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ServerGroupAbridged"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - server network is not found
  "/server_groups/{id}":
    patch:
      operationId: update_server_group
      summary: Update simple confirurable attributes on a server group
      tags:
      - Server Groups
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.servers.manage
      description: |
        This only supports updating the server group color as that is the only attribute that
        may be modified. Customers will never be able to directly change the server group
        label; use merge_server_groups for that instead.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateServerGroupInput"
      responses:
        200:
          description: the updated server group
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ServerGroup"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - server group not found
            - server group not owned by active network
            - hex_color is missing
            - hex_color is syntactically invalid
  "/staff_members/metrics":
    get:
      operationId: fetch_staff_metrics
      summary: Fetch metrics for all staff members on the active server network
      tags:
      - Staff Members
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.performance.view
      description: 'Fetch detailed activity and performance data about all players
        with staff permissions.

        '
      responses:
        200:
          description: List of staff metrics in no particular order
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/StaffMetrics"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
  "/administrators":
    post:
      operationId: create_admin
      summary: Apply the admin role to a player
      tags:
      - Staff Members
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      description: |
        Grant a player the admin rank. This gives them unrestricted access to nearly everything.

        If the player is already an admin, then this call will be ignored.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateAdminInput"
      responses:
        200:
          description: Staff metrics for the new admin
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/StaffMetrics"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player does not exist in our database
            - player is the owner
            - player's account is not linked with a user
  "/administrators/{id}/actions/demote":
    post:
      operationId: demote_admin
      summary: Remove an staff member's rank and optionally reset permissions
      tags:
      - Staff Members
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      description: |
        Revoke a player's admin rank. The consumer has the option to restore the player to the default
        permissioned state in case the player has elevated permissions aside from the admin rank.

        If the player is not an admin, then this call will be ignored.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/DemoteAdminInput"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player does not exist in our database
  "/players/{uuid_or_username}":
    get:
      operationId: fetch_player
      summary: Fetch basic information about a player
      tags:
      - Players
      security:
      - user_web: []
      - user_mobile: []
      description: |
        Fetch a player by ID or username. If the player is not found, that means it doesn't exist in our
        database. However, it still may exist within Minecraft itself. Minecraft does not expose an easy
        way for people to see when new player accounts are created, nor do they allow us to list all
        existing players. Our only sources of player data are:

        - a player logs into one of our servers (or a customer's server, once they are using our plugin)
        - a customer imports player data for our mutual convenience
        - a user on our website imports a single player while using our player search/import UI
        - we import player data ourselves from a treasure trove we found on the internet

        This endpoint will return any sensitive data unless the user has one of these permissions:

        - `com.managemc.staff.owner`
        - `com.managemc.staff.admin`
        - `com.managemc.staff.players.view-enhanced`
      parameters:
      - in: path
        name: uuid_or_username
        schema:
          type: string
        required: true
        description: the Minecraft ID or username of the player
      responses:
        200:
          description: player details
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EnhancedPlayerInfo"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        404:
          description: Player not found in our database, but may exist within Minecraft
  "/players":
    post:
      operationId: create_player
      summary: Create a player within our database
      tags:
      - Players
      security:
      - user_web: []
      - user_mobile: []
      description: |
        We call Mojang's API to validate that the player is real, skipping asynchronous validation. We expect users
        in our web/mobile apps to use this endpoint occasionally, but it won't be called so often that performance
        becomes an issue.

        The response's "player" attribute will be empty if the player is found not to exist.

        Minecraft servers should call `import_players` instead, since we expect Minecraft servers to use their own
        Mojang rate limit budget to determine the player's UUID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreatePlayerInput"
      responses:
        200:
          description: cursory information about a player
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreatePlayerResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - username is syntactically invalid (must be 1-16 chars, alphanumeric and underscore only)
        500:
          description: |
            Under any of the following conditions:

            - we get an unexpected error from Mojang's API other than 404 / Not Found
  "/players/import":
    post:
      operationId: import_players
      summary: Create a player within our database
      tags:
      - Players
      security:
      - external_minecraft: []
      description: |
        Import players in batches. If the consumer is a "trusted" server network, then the player
        data will be trusted. If not, then the players created via this endpoint will be placed at
        the top of the validation queue.

        In either case, the player's username will be subject to a periodic refresh.

        Players will be flagged as invalid asynchronously if they aren't real.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ImportPlayersInput"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
  "/players/{id}":
    delete:
      operationId: delete_player
      summary: Delete a player
      tags:
      - Players
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.players.manage
      description: |
        Delete a player and all information associated with it. This cannot be undone.

        For idempotence, this operation will be quietly ignored if the player is not found.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player status is neither `INVALID` nor `MANUAL_REVIEW`

            ...or under any of the following more complex conditions, which consumers cannot realistically validate ahead of time:

            - player was not added by the active server network
            - player has ever joined any Minecraft server managed by ManageMC
            - player is on a staff member's watch list (on any server network)
            - player has been accused of rulebreaking (i.e. accusation or watch request) on any server network
  "/players/{id}/notes":
    get:
      operationId: fetch_notes
      summary: Fetch notes for a player
      tags:
      - Notes
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.notes.view
      description: |
        Fetch all notes for a player. If the API consumer is a moderator, then "hidden" notes will be
        omitted from the result. The result is sorted by creation time, starting with the most recent.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: array of notes sorted from newest to oldest
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PlayerNote"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player not found in our database
    post:
      operationId: create_note
      summary: Create a new note
      tags:
      - Notes
      security:
      - external_minecraft: []
      - user_minecraft: []
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.notes.create
      description: |
        Create a new note. Any user can create a hidden note, which will be visible only
        to the author. Notes without an author are considered automatic.
      parameters:
      - "$ref": "#/components/parameters/FlexiblePlayerId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateNoteInput"
      responses:
        200:
          description: the newly created note
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PlayerNote"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        404:
          description: |
            Under any of the following conditions:

            - player not found in our database
  "/ip_bans":
    get:
      operationId: fetch_ip_bans
      summary: Fetch all IP bans associated with the active server network
      tags:
      - Punishments
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.punishments.view
      description: |
        This includes pardoned/expired IP bans as well as bans against whole IP address ranges (e.g.
        10.10.10.0-10.10.10.45).

        Players without the special `com.managemc.staff.punishments.shadow.manage` permission will be unable
        to see shadow IP bans.
      responses:
        200:
          description: IP bans
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/IpBan"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
  "/players/{id}/bans":
    post:
      operationId: create_ban
      summary: Issue a ban against a player
      tags:
      - Punishments
      security:
      - external_minecraft: []
      - user_minecraft: []
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.punishments.bans.create
      - com.managemc.staff.punishments.bans.create-ingame
      description: |
        Issue a ban against a player.

        The "ingame" permission only works if the auth strategy is `user_minecraft`,
        but the web permission works for all authentication strategies requiring permissions.
        As always, `external_minecraft` (which represents an application, not a
        human user) has no permission-based restrictions.

        Note that special permissions are required to create a ban with `SHADOW`
        visibility or with a duration greater than 24 hours. See documentation of
        parameters for more information.
      parameters:
      - "$ref": "#/components/parameters/FlexiblePlayerId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateBanOrMuteInput"
      responses:
        200:
          description: the newly created ban
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BanOrMute"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        404:
          description: |
            Under any of the following conditions:

            - offender is not in our database
        422:
          description: |
            Under any of the following conditions:

            - server group does not exist
            - server group exists but is associated with a different server network
            - duration is negative
            - visibility is not one of the permitted enum values
  "/players/{id}/mutes":
    post:
      operationId: create_mute
      summary: Issue a mute against a player
      tags:
      - Punishments
      security:
      - external_minecraft: []
      - user_minecraft: []
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.punishments.mutes.create
      - com.managemc.staff.punishments.mutes.create-ingame
      description: |
        Issue a mute against a player.

        The "ingame" permission only works if the auth strategy is `user_minecraft`,
        but the web permission works for all authentication strategies requiring permissions.
        As always, `external_minecraft` (which represents an application, not a
        human user) has no permission-based restrictions.

        Note that special permissions are required to create a mute with `SHADOW`
        visibility or with a duration greater than 24 hours. See documentation of
        parameters for more information.
      parameters:
      - "$ref": "#/components/parameters/FlexiblePlayerId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateBanOrMuteInput"
      responses:
        200:
          description: the newly created mute
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BanOrMute"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        404:
          description: |
            Under any of the following conditions:

            - offender is not in our database
        422:
          description: |
            Under any of the following conditions:

            - server group does not exist
            - server group exists but is associated with a different server network
            - duration is negative
            - visibility is not one of the permitted enum values
  "/players/{id}/warnings":
    post:
      operationId: create_warning
      summary: Issue a warning against a player
      tags:
      - Punishments
      security:
      - external_minecraft: []
      - user_minecraft: []
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.punishments.warnings.create
      - com.managemc.staff.punishments.warnings.create-ingame
      description: |
        Warnings give staff members a way of formally communicating to players that
        they have broken the rules.

        The "ingame" permission only works if the auth strategy is `user_minecraft`,
        but the web permission works for all authentication strategies requiring permissions.
        As always, `external_minecraft` (which represents an application, not a
        human user) has no permission-based restrictions.
      parameters:
      - "$ref": "#/components/parameters/FlexiblePlayerId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateWarningInput"
      responses:
        200:
          description: the newly created warning
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Warning"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        404:
          description: |
            Under any of the following conditions:

            - offender is not in our database
  "/players/{id}/player_punishments_issued":
    get:
      operationId: fetch_player_punishments_issued
      summary: Fetch all punishments issued by a given player
      tags:
      - Punishments
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.punishments.view
      description: |
        This includes punishments that are expired and/or pardoned.

        Players without the special `com.managemc.staff.punishments.shadow.manage` permission will be unable
        to see shadow punishments.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: bans, mutes, and warnings, sorted by creation time starting
            with the most recent
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PlayerPunishment"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player not found in our database
  "/players/{id}/punishment_history":
    get:
      operationId: fetch_player_punishment_history
      summary: Fetch all bans, mutes, and warnings received by a player
      tags:
      - Punishments
      security:
      - external_minecraft: []
      - user_minecraft: []
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.punishments.view
      description: |
        This includes bans and mutes that are expired and/or pardoned. Does not include IP bans.

        Players without the special `com.managemc.staff.punishments.shadow.manage` permission will be unable
        to see shadow punishments.
      parameters:
      - "$ref": "#/components/parameters/FlexiblePlayerId"
      responses:
        200:
          description: punishment history with the most recent first
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PlayerPunishment"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        404:
          description: |
            Under any of the following conditions:

            - player is not in our database
  "/players/{id}/actions/watch":
    post:
      operationId: watch_player
      summary: Watch a player
      tags:
      - Players
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.watchlist.manage
      description: |
        Watch a player to receive notifications when that player logs into servers owned by the
        active server network. If the player is already on the watch list, calling this endpoint
        will have no effect and raise no error.

        The player must exist in our database already for it to be watchable. Users can add new
        players to our database manually in the player search UI.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: the updated player watch list, in reverse addition order
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PlayerWatchList"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player does not exist in our database yet
            - the watchlist already has 20 players on it
  "/players/{id}/actions/unwatch":
    post:
      operationId: unwatch_player
      summary: Stop watching a player
      tags:
      - Players
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.watchlist.manage
      description: |
        Stop watching a player. If the player was not on the watch list to begin with, calling
        this endpoint will have no effect and raise no error.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: the updated player watch list, in reverse addition order
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PlayerWatchList"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player does not exist in our database yet
  "/players/{id}/actions/update_uuid":
    post:
      operationId: update_player_uuid
      summary: Update a player's UUID
      tags:
      - Players
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.players.manage
      description: |
        Manually assign a UUID to a player that requires manual attention. Manual
        assignment is required when players are not given a UUID (such as during an
        import from a legacy ban plugin) or if their assigned UUID is determined to
        be invalid.

        If another player in our database is determined to have the same UUID, then
        the target player will be "merged" with that player. This cannot be undone.
        The response will include the merged player's new internal ID.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdatePlayerUuidInput"
      responses:
        200:
          description: the updated player
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CursoryPlayerInfo"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player status is neither `INVALID` nor `MANUAL_REVIEW`
            - player was not added by the active server network
            - player does not exist in our database
  "/players/{id}/login_history":
    get:
      operationId: fetch_player_login_history
      summary: Fetch login history for a player
      tags:
      - Players
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.player-activity.view
      description: |
        For use in player activity tab and the alternate account analysis feature. The
        response will omit any login events that have not finished yet, because due to the
        potential for externally hosted servers to crash before they report that a given
        player has logged out, that data might be wrong. Such cases are corrected
        asynchrouously.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: the player's login history on the active server, sorted by
            start time
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PlayerLoginHistory"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player does not exist in our database yet
  "/players/{id}/login_history/compare":
    post:
      operationId: compare_player_login_history
      summary: Compare a player's login history to that of another
      tags:
      - Players
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.player-activity.view
      description: |
        Server-side computation of mutual login history analytics. Most of this data can
        be derived from `fetch_player_login_history` if the consumer is willing to do a
        Leetcode puzzle.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ComparePlayerLoginHistoryInput"
      responses:
        200:
          description: analytics
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PlayerLoginHistoryComparison"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - either player does not exist in our database yet
            - max_time_ago_days (if provided) is not a positive integer
  "/players/{id}/alt_accounts":
    get:
      operationId: fetch_alt_accounts
      summary: Fetch a given player's alt accounts
      tags:
      - Players
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.alt-analysis.view
      description: |
        Fetch a list of alt account analysis results, in which a user indicates
        whether a given player is an alt account of another and with what level of
        confidence. Currently all analysis is performed manually, but we may begin
        running analysis automatically in some cases later on.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: the player's alt accounts on the active server
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AltAccountAnalysisResult"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player does not exist in our database yet
    post:
      operationId: analyze_alt_account
      summary: Create an alt account analysis
      tags:
      - Players
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.alt-analysis.analyze
      description: |
        A staff member indicates whether two players are alternate accounts (i.e. used
        partially or fully by the same human user). They reach this conclusion based
        on the data exposed in the `fetch_player_login_history` endpoint.

        One player ID is provided in the path and the other in the request payload. Pay
        attention to which is which, as it will influence the response payload.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          format: int64
        required: true
        description: internal ID of the player whose page is currently being displayed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AnalyzeAltAccountInput"
      responses:
        200:
          description: the newly created alt account analysis result
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AltAccountAnalysisResult"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - both player IDs are the same
            - either player not found
            - conclusion not recognized
            - confidence not recognized
  "/players/{id}/ip_addresses":
    get:
      operationId: fetch_player_ip_addresses
      summary: Fetch IP addresses used by a player
      tags:
      - IP Addresses
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.ips.view
      description: |
        Fetch IP addresses used by a given player on the active server network. Unfinished
        server activity will not be considered because it's possible for servers to crash
        without reporting a problem, causing player sessions to never end. This is corrected
        asynchronously based on server heartbeat analysis.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: |
            the player's IP addresses sorted by recency of use starting with the most
            recent
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PlayerIpAddress"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player does not exist in our database yet
  "/players/searches":
    post:
      operationId: search_players
      summary: Search for players by username
      tags:
      - Players
      security:
      - user_web: []
      - user_mobile: []
      description: 'Matches usernames that contain the user input exactly in any position.

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SearchPlayersInput"
      responses:
        200:
          description: an object containing search results
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SearchPlayersResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
  "/player_watchlist":
    get:
      operationId: fetch_player_watchlist
      summary: Fetch the player watch list
      tags:
      - Players
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.watchlist.manage
      description: |
        Fetch the list of players watched by the active user on the active server network. The user
        will receive notifications when watched players enter servers within the server network.
      responses:
        200:
          description: the player watch list in reverse addition order
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PlayerWatchList"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
  "/players/active/warnings":
    get:
      operationId: fetch_active_warnings
      summary: Fetch active warnings for the active player
      tags:
      - Punishments
      security:
      - user_web: []
      - user_mobile: []
      description: |
        Fetch active warnings for the active player across all server networks.

        User must be operating as a player.
      responses:
        200:
          description: active warnings for the player in no specific order
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AckableWarning"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
  "/ip_addresses/searches":
    post:
      operationId: search_ip_addresses
      summary: Search for IPv4 addresses known to ManageMC
      tags:
      - IP Addresses
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.ips.view
      description: 'Matches IP addresses that contain the user input exactly at any
        position.

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SearchIpAddressesInput"
      responses:
        200:
          description: an object containing search results
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SearchIpAddressesResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - input is null or an empty string
            - input is not a valid substring of an IP address
  "/ip_addresses/{id}/actions/resolve":
    post:
      operationId: resolve_ip_address
      summary: Fetch location data for an IP address
      tags:
      - IP Addresses
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.ips.view
      description: Get geolocation data about an IP address.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: IP address details
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IpAddress"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - IP not found
            - IP was resolved within the last 24 hours

            ...or under any of the soft failure conditions documented in the response body format.
          content:
            application/json:
              schema:
                properties:
                  message:
                    "$ref": "#/components/schemas/ErrorMessage"
                  soft_failure_code:
                    type: string
                    enum:
                    - PRIVATE
                    description: |
                      A constant representing a "soft" failure condition that the consuming application
                      had no way of anticipating or preventing.

                      - `PRIVATE`: IP address is private
                      - `RESERVED`: IP address is part of reserved range
        429:
          description: |
            Geolocation API rate limit of 45 requests/minute exceeded. Temporary failure
            condition.
        500:
          description: |
            Endpoint will return a 500 response if there is an unexpected condition encountered
            while interacting with the geolocation API.
  "/ip_addresses/{id_or_address}":
    get:
      operationId: fetch_ip_address
      summary: Fetch details about an IP address
      tags:
      - IP Addresses
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.ips.view
      description: |
        Fetch details about an IP address. If the consumer queries by address instead of
        ID, then the address will be created in our systems if it hasn't been created
        already.

        If the caller does not have the `com.managemc.staff.punishments.view` permission,
        then no IP bans will be included.
      parameters:
      - in: path
        name: id_or_address
        schema:
          type: string
        required: true
        description: A valid IPv4 address or internal ID of an IP address.
      responses:
        200:
          description: |
            IP address details. Login history sorted first by the player's internal ID and
            then by start time. Ban history sorted by issue time.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IpAddressDetails"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - address is syntactically invalid (if querying by IP address)

            ...or under any of the soft failure conditions documented in the response body format.
          content:
            application/json:
              schema:
                properties:
                  message:
                    "$ref": "#/components/schemas/ErrorMessage"
                  soft_failure_code:
                    type: string
                    enum:
                    - NOT_FOUND
                    description: |
                      A constant representing a "soft" failure condition that the consuming application
                      had no way of anticipating or preventing.

                      - `NOT_FOUND`: consumer queried by ID but the IP address was not found
  "/ip_addresses/{address}/bans":
    post:
      operationId: create_ip_ban
      summary: Issue a ban against an IP address
      tags:
      - Punishments
      security:
      - external_minecraft: []
      - user_minecraft: []
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.punishments.ip-bans.create
      - com.managemc.staff.punishments.ip-bans.create-ingame
      description: |
        Issue a ban against an IP address.

        The "ingame" permission only works if the auth strategy is `user_minecraft`,
        but the web permission works for all authentication strategies requiring permissions.
        As always, `external_minecraft` (which represents an application, not a
        human user) has no permission-based restrictions.

        Note that special permissions are required to create an IP ban with `SHADOW`
        visibility or with a duration greater than 24 hours. See documentation of
        parameters for more information.
      parameters:
      - in: path
        name: address
        schema:
          type: string
        required: true
        description: |
          An IPv4 address or range of IPv4 addresses. CIDR notation is not supported because
          humans are bad at understanding it and these addresses come from human user input.

          Examples:
          - 1.2.3.4 (IPv4 address)
          - 1.2.3.4-1.2.3.10 (IPv4 address range)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateIpBanInput"
      responses:
        200:
          description: the newly created IP ban
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IpBan"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - IPv4 address or range is syntactically invalid
            - server group does not exist
            - server group exists but is associated with a different server network
            - duration is negative
            - visibility is not one of the permitted enum values
  "/notes/{id}":
    patch:
      operationId: update_note
      summary: Update an existing note
      tags:
      - Notes
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.notes.create
      description: |
        Edit the contents of a note. Notes cannot be made hidden once created. Users can only
        edit their own notes.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateNoteInput"
      responses:
        200:
          description: the updated note
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PlayerNote"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - note is not found
            - note exists but is associated with a different server network
            - note exists but was authored by another player (or is anonymous)
    delete:
      operationId: delete_note
      summary: Delete a note
      tags:
      - Notes
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.notes.create
      description: 'Delete a note. This cannot be undone.

        '
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          format: int64
        required: true
        description: the internal ID of the note
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - note is not found
            - note exists but was authored by another user (or is anonymous)
            - note exists but is associated with a different server network
  "/bans/{id}":
    patch:
      operationId: update_ban
      summary: Update particular attributes of an existing ban
      tags:
      - Punishments
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.punishments.edit
      - com.managemc.staff.punishments.bans.create
      description: |
        Only some attributes may be modified once a ban is created. Most attributes are optional, but if they are
        left blank, the API will set them to null. If you wish to edit only some subset of these attributes, make
        sure to pass the original values for the fields you don't want changed.

        If the punishment has been pardoned already, then all fields except for the following will be ignored:
          - details
          - pardon_details
          - visibility

        If the punishment has been expired (and has not been pardoned), then all fields except for these will be ignored:
          - details
          - visibility

        Players need the special permission `com.managemc.staff.punishments.edit` to edit punishments issued by other
        players.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateBanOrMuteInput"
      responses:
        200:
          description: the newly updated ban
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BanOrMute"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - punishment does not exist
            - punishment belongs to a different server network
            - operator is trying to change to or from SHADOW visibility
            - server group does not exist
            - server group exists but is associated with a different server network
  "/mutes/{id}":
    patch:
      operationId: update_mute
      summary: Update particular attributes of an existing mute
      tags:
      - Punishments
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.punishments.edit
      - com.managemc.staff.punishments.mutes.create
      description: |
        Only some attributes may be modified once a mute is created. Most attributes are optional, but if they are
        left blank, the API will set them to null. If you wish to edit only some subset of these attributes, make
        sure to pass the original values for the fields you don't want changed.

        If the punishment has been pardoned already, then all fields except for the following will be ignored:
          - details
          - pardon_details
          - visibility

        If the punishment has been expired (and has not been pardoned), then all fields except for these will be ignored:
          - details
          - visibility

        Players need the special permission `com.managemc.staff.punishments.edit` to edit punishments issued by other
        players.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateBanOrMuteInput"
      responses:
        200:
          description: the newly updated mute
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BanOrMute"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - punishment does not exist
            - punishment belongs to a different server network
            - duration is negative
            - visibility is not one of the permitted enum values
            - operator is trying to change to or from SHADOW visibility
            - server group does not exist
            - server group exists but is associated with a different server network
  "/warnings/{id}":
    patch:
      operationId: update_warning
      summary: Update particular attributes of an existing warning
      tags:
      - Punishments
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.punishments.edit
      - com.managemc.staff.punishments.warnings.create
      description: |
        Only some attributes may be modified once a warning is created. If optional attributes are left blank,
        the API will set them to null. If you wish to edit only some subset of these attributes, make sure to pass
        the original values for the fields you don't want changed.

        The pardon_details field will be ignored unless the warning has been pardoned.

        Players need the special permission `com.managemc.staff.punishments.edit` to edit punishments issued by other
        players.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateWarningInput"
      responses:
        200:
          description: the newly updated warning
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Warning"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - punishment does not exist
            - punishment belongs to a different server network
  "/warnings/{id}/actions/acknowledge":
    post:
      operationId: acknowledge_warning
      summary: Acknowledge a formal warning
      tags:
      - Punishments
      security:
      - user_web: []
      - user_mobile: []
      description: |
        This is called when a player acknowledges a formal warning by going to our website. Once the warning
        is acknowledged, the player will be able to resume playing on the server network that issued the
        warning.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          description: User is not operating as a player
        422:
          description: |
            Under any of the following conditions:

            - warning not found for active player
  "/ip_bans/{id}":
    patch:
      operationId: update_ip_ban
      summary: Update particular attributes of an existing IP ban or range IP ban
      tags:
      - Punishments
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.punishments.edit
      - com.managemc.staff.punishments.ip-bans.create
      description: |
        Only some attributes may be modified once an IP ban is created. Most attributes are optional, but if they are
        left blank, the API will set them to null. If you wish to edit only some subset of these attributes, make
        sure to pass the original values for the fields you don't want changed.

        If the punishment has been pardoned already, then all fields except for the following will be ignored:
          - details
          - pardon_details
          - visibility

        If the punishment has been expired (and has not been pardoned), then all fields except for these will be ignored:
          - details
          - visibility

        Players need the special permission `com.managemc.staff.punishments.edit` to edit punishments issued by other
        players.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateBanOrMuteInput"
      responses:
        200:
          description: the newly updated IP ban
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IpBan"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - punishment does not exist
            - punishment belongs to a different server network
            - duration is negative
            - visibility is not one of the permitted enum values
            - operator is trying to change to or from SHADOW visibility
            - server group does not exist
            - server group exists but is associated with a different server network
  "/punishments/batch_pardon":
    post:
      operationId: pardon_punishments
      summary: Pardon one or more punishments at once for the same reason
      tags:
      - Punishments
      security:
      - user_web: []
      - user_mobile: []
      - external_minecraft: []
      - user_minecraft: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.punishments.pardon
      - com.managemc.staff.punishments.bans.create
      - com.managemc.staff.punishments.mutes.create
      - com.managemc.staff.punishments.warnings.create
      - com.managemc.staff.punishments.ip-bans.create
      description: |
        Players with permission to issue punishments via the website also have permission to pardon those
        punishments. Pardoning punishments issued by other players requires the special permission
        `com.managemc.staff.punishments.pardon`.

        Punishments that have expired or already been pardoned are ignored.

        The response payload will indicate whether any of the punishments were inactive. The consumer may want
        to provide a warning message to the end user if inactive punishment(s) were found.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PardonPunishmentsInput"
      responses:
        200:
          description: Response payload
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PardonPunishmentsResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - one or more punishments does not exist
            - one or more punishments belongs to a different server network
  "/punishments/batch_delete":
    post:
      operationId: delete_punishments
      summary: Delete one or more punishments at once
      tags:
      - Punishments
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.punishments.delete
      - com.managemc.staff.punishments.bans.create
      - com.managemc.staff.punishments.mutes.create
      - com.managemc.staff.punishments.warnings.create
      - com.managemc.staff.punishments.ip-bans.create
      description: |
        Players with permission to issue punishments via the website also have permission to delete those
        punishments. Deleting punishments issued by other players requires the special permission
        `com.managemc.staff.punishments.delete`.

        Punishments are archived instead of deleted and thus may be recovered in the event that this
        feature is misused.

        Players with only the "self" permission can only delete their own punishments. Players with
        the "all" permission may delete any punishments within the active server network.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/DeletePunishmentsInput"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - one or more punishments does not exist
            - one or more punishments belongs to a different server network
  "/heartbeats":
    post:
      operationId: emit_heartbeat
      summary: As a Minecraft server, indicate that you are still alive
      tags:
      - Heartbeats
      x-rollback: false
      security:
      - external_minecraft: []
      description: |
        External consumers only. This endpoint verifies that the server's current client version is
        acceptable, helps us track player counts, and indicates to our systems that the server is
        still online.

        While a server is active, make this request every minute at the :00 second mark no matter
        what. Additional heartbeats are helpful; every 20 seconds is recommended. Requests sent at
        the :00 second mark will log player counts permanently. Other requests will merely update
        the "most recent player count" snapshot for this server, which is used to determine the
        current total count of online players.

        If the server is marked as crashed, this endpoint will respond with a 422 status. In this
        edge case, a server probably failed to emit heartbeats for at least 10 minutes, which caused
        it to be marked as crashed, but then somehow recovered without restarting. This is not
        expected behavior and does not have an easy workaround, so the consumer should simply restart
        the server upon encountering this condition.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EmitHeartbeatInput"
      responses:
        200:
          description: A response indicating whether the client needs to update ManageMC
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EmitHeartbeatResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - the version is not formatted correctly (three sets of digits separated by periods)
            - server not found
            - server is associated with a different server network
            - the server has STOPPED status (indicating that it successfully shut down)
            - the server has CRASHED status (indicating that no heartbeats were sent for at least 10 minutes)
            - player_count is not a nonnegative integer
  "/initial_heartbeats":
    post:
      operationId: emit_initial_heartbeat
      summary: As a Minecraft server, indicate that you just started running
      tags:
      - Heartbeats
      x-rollback: false
      security:
      - external_minecraft: []
      description: |
        External consumers only. Call this endpoint exactly once to indicate that a Minecraft server
        has started. Send subsequent heartbeats through the /heartbeats endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EmitInitialHeartbeatInput"
      responses:
        200:
          description: A response including an update check and the server ID
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EmitInitialHeartbeatResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - the version is not formatted correctly (three sets of digits separated by periods)
            - auth payload does not contain server_group_id
  "/final_heartbeats":
    post:
      operationId: emit_final_heartbeat
      summary: As a Minecraft server, indicate that you are shutting down
      tags:
      - Heartbeats
      x-rollback: false
      security:
      - external_minecraft: []
      description: |
        External consumers only. Call this endpoint exactly once to indicate that a Minecraft server
        has shut down, regardless of the cause of the shutdown.

        Servers that stop "heartbeating" without calling this endpoint will be marked as CRASHED.

        If the server was (perhaps erroneously) marked as CRASHED, this endpoint will disregard this
        potential issue and mark the server as STOPPED.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/EmitFinalHeartbeatInput"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - server not found
            - server is associated with a different server network
            - server has STOPPED status (indicating that it has already shut down successfully)
  "/linked_players":
    post:
      operationId: link_player
      summary: Associate a Minecraft account with a ManageMC user account
      tags:
      - Accounts
      security:
      - internal_minecraft: []
      description: |
        This should only be called from a Minecraft server run by us. That way, we can be certain
        the Minecraft account in question is real and properly authenticated (with Mojang).

        Minecraft accounts may only be associated with one user at a time. Shared accounts are not
        and never will be supported.

        Note that a 200 response does not necessarily mean success. Check the response body for soft
        failure conditions.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LinkPlayerInput"
      responses:
        200:
          description: A status message indicating what went wrong, if anything
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LinkPlayerResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - player not found
  "/linked_players/{id}":
    delete:
      operationId: unlink_player
      summary: Unlink a Minecraft account from a ManageMC user
      tags:
      - Accounts
      security:
      - user_web: []
      - user_mobile: []
      description: |
        Minecraft accounts may be unlinked, but that doesn't prevent them from becoming linked
        once again in the future.

        This endpoint unlinks the Minecraft account. If the end user is trying to unlink the
        active Minecraft account, then the consumer must first call `switch_operator` and have
        the user operate as a different player, or as no player at all.

        Unlinking a player ends all web and mobile sessions involving that player.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - player not found
            - player is linked with a different user
            - player has staff permissions on any server network
            - player is the active player
  "/version_recommendations":
    get:
      operationId: fetch_version_recommendations
      summary: Fetch ManageMC client version recommendations
      tags:
      - Version Recommendations
      security:
      - user_web: []
      - user_mobile: []
      description: |
        This endpoint exposes version recommendations for the Java plugins run on Minecraft
        servers hosted by customers. It has nothing to do with the ManageMC API version.
      responses:
        200:
          description: The current version recommendations
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PluginVersionRecommendations"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
  "/servers":
    get:
      operationId: fetch_servers
      summary: Fetch all online and recently online Minecraft servers
      tags:
      - Servers
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.traffic.view
      responses:
        200:
          description: List of Minecraft servers in no particular order
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/MinecraftServer"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
  "/servers/traffic_summary":
    get:
      operationId: fetch_traffic_summary
      summary: Fetch traffic history for active server network
      tags:
      - Servers
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.traffic.view
      description: |
        This endpoint exposes statistics about how many players were playing concurrently on
        each server group over time. Stats are collected once per minute, exactly on the
        minute. Stats from the most recent minute are omitted if they are less than 20 seconds
        old because it's possible that not all servers have reported stats. 20 seconds is a
        very safe leeway period and could potentially be reduced.
      parameters:
      - in: query
        name: max_days_ago
        schema:
          type: integer
          format: int32
        description: |
          The earliest time, in days, at which the consumer wants stats. Leave blank to
          fetch all-time stats (not recommended unless requested explicitly by the user).
        required: false
      - in: query
        name: granularity
        schema:
          type: integer
          format: int32
        description: The number of minutes between player count snapshots (15 if left
          blank)
        required: false
      responses:
        200:
          description: List of server traffic stats in collection order ascending
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ServerTrafficSummary"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - max_days_ago is not a positive integer
            - granularity is not a positive integer
  "/youtube_video_metadata/{id}":
    get:
      operationId: fetch_youtube_video_metadata
      summary: Fetch metadata about a YouTube video
      tags:
      - YouTube Videos
      security:
      - user_web: []
      - user_mobile: []
      description: |
        Pull metadata about the video from YouTube's authenticated API. Use this endpoint to
        pre-validate videos before they are submitted as part of hacker reports.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: |
          The external ID of the YouTube video, found in the URL. For example, in this video:
          https://www.youtube.com/watch?v=kJQP7kiw5Fk, the ID is kJQP7kiw5Fk.
        required: true
      responses:
        200:
          description: Metadata about the video
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FetchYouTubeVideoMetadataResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
  "/watch_requests":
    get:
      operationId: fetch_watch_requests
      summary: Fetch cursory information about watch requests for the active server
        network
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.accusations.view
      description: |
        This endpoint fetches all submitted watch requests for the active server network. Separate
        endpoints exist for fetching watch requests filed or reviewed by a particular player.
      parameters:
      - in: query
        name: include_inactive
        schema:
          type: boolean
        required: false
        description: |
          Optional flag indicating that the API should fetch closed reports, not just active
          ones. Closed watch requests will NOT include an active server, even if the accused
          player is online.
      responses:
        200:
          description: 'Watch requests, starting with open requests whose accusee
            is currently online.

            '
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/WatchRequest"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
    post:
      operationId: create_watch_request
      summary: Create a new watch request
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      - user_minecraft: []
      description: |
        Creates a new watch request. If the user has already reported the same player on the
        same server network and that request is still open, then the summary and in-game
        distance will be updated (if provided) and no new request will be made.

        The response body will be the watch request in its current state, accounting for any
        updates if applicable.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateWatchRequestInput"
      responses:
        200:
          description: The newly created watch request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WatchRequest"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - server network not found
            - server group (if provided) not found
            - server group does not belong to server network
            - accusee not found
            - player tries to report themself
            - in_game_distance is provided but token type is not user_minecraft
  "/watch_requests/{id}/actions/resolve":
    post:
      operationId: resolve_watch_request
      summary: Close watch request as a staff member
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.accusations.review
      description: |
        As a staff member, close a watch request on the active server network. Staff members
        can close their own watch requests. They can also elect to close similar reports (i.e.
        watch requests with status `OPEN` and the same accusee).
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ResolveWatchRequestInput"
      responses:
        200:
          description: The updated watch request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WatchRequest"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - watch request not found
            - watch request belongs to a different server network
            - invalid status
  "/watch_requests/{id}/actions/close":
    post:
      operationId: close_watch_request
      summary: Close watch request as the author
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      description: |
        Close a watch request. This endpoint is for use only by the user who authored the
        watch request at hand. No special permissions are required, but unlike
        `resolve_watch_request`, this endpoint does not allow the user to indicate whether
        the reported player was cheating.

        If the watch request is already closed, then this endpoint will ignore the request
        and keep the status as it is. The final state of the watch request is reflected in
        the response body.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: The updated watch request
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WatchRequest"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          description: |
            Under any of the following conditions:

            - user is not the author
        422:
          description: |
            Under any of the following conditions:

            - watch request not found
  "/accusations":
    get:
      operationId: fetch_accusations
      summary: Fetch cursory information about accusations for the active server network
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.accusations.view
      description: |
        An accusation is a formal complaint about the behavior of a player. They are filed
        by users and reviewed by staff members with the appropriate permissions. Most
        accusations will probably be hacker reports and complaints about chat abuse. Staff
        members who review accusations may elect to issue punishments as a result of the
        evidence provided in these reports.

        This endpoint fetches all submitted accusations for the active server network. Separate
        endpoints exist for fetching accusations filed or reviewed by a particular player.
      parameters:
      - in: query
        name: include_inactive
        schema:
          type: boolean
        required: false
        description: |
          Optional flag indicating that the API should fetch all reports, not just active
          ones. "Active" reports are those with status `SUBMITTED` or `CONFLICTING_VERDICTS`.
      - in: query
        name: include_stats
        schema:
          type: boolean
        required: false
        description: |
          Optional flag indicating that the API should fetch stats for the accusations (the
          `ruling_times` and `includes_video_evidence` fields).
      responses:
        200:
          description: Accusations in reverse creation order
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/AccusationBasicInfo"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
    post:
      operationId: create_accusation
      summary: Create a new accusation
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      - user_minecraft: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateAccusationInput"
      responses:
        200:
          description: The newly created accusation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccusationInDepthInfo"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - status not recognized
            - server network not found
            - server group (if provided) not found
            - server group does not belong to server network
            - accusee not found
            - YouTube video is private or does not exist
            - YouTube video duration within start/end time constraints exceeds configured maximum
            - start or end time is not within video length constraint
            - end is equal to or less than start
            - player tries to report themself
            - in_game_distance is provided but token type is not user_minecraft
  "/accusations/{id}":
    get:
      operationId: fetch_accusation
      summary: Fetch a single accusation
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      description: |
        This endpoint fetches more in-depth information about a particular accusation. In order
        to call this endpoint, a user must be the author of the accusation or have one of the
        following permissions:
        - com.managemc.staff.owner
        - com.managemc.staff.admin
        - com.managemc.staff.accusations.view
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: In-depth data about the accusation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccusationInDepthInfo"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          description: |
            Under any of the following conditions:

            - if operator is a staff member: accusation was issued by a different player on a different server network
            - if operator is a regular user: accusation was issued by a different player
        422:
          description: |
            Under any of the following conditions:

            - accusation not found
    put:
      operationId: update_accusation
      summary: Update an accusation
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      description: |
        The player that issued an accusation is allowed to edit that accusation as long as no staff
        members have begun reviewing it and the report was not closed. More concretely, an accusation
        is editable if all of the following are true:

        - no user is actively reviewing the accusation
        - no verdicts have been issued for the accusation
        - `status` is `NOT_SUBMITTED` or `SUBMITTED`
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          format: int64
        description: internal ID of the accusation
        required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateAccusationInput"
      responses:
        200:
          description: The updated accusation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UpdateAccusationResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - accusation not found
            - accusation authored by a different player

            Or any of the other 422 conditions listed under create_accusation.
  "/accusations/{id}/rulings":
    post:
      operationId: create_accusation_ruling
      summary: Create accusation ruling
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.accusations.review
      description: 'Call this when a user with a permit to review an accusation submits
        a verdict.

        '
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateAccusationRulingInput"
      responses:
        200:
          description: Response with updated accusation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreateAccusationRulingResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          description: |
            Under any of the following conditions:

            - operator is not a staff member
            - accusation is managed by a different server network
        422:
          description: |
            Under any of the following conditions:

            - accusation not found
            - unrecognized verdict
            - user does not have a permit or the permit expired
  "/accusations/{id}/actions/close":
    post:
      operationId: close_accusation
      summary: Close an accusation
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.accusations.review
      description: |
        This action permanently closes an open accusation, making its status `CLOSED_EARLY`.
        Staff members might do this if they do not belive it's a good use of time to review
        the report for accuracy. Staff members with permission to use this API can close
        an accusation regardless of whether review has begun.

        Examples:
        - video evidence is too old to be meaningful
        - video evidence was recorded on a different server network and is thus irrelevant,
          but not necessarily wrong
        - the author was sending redundant accusations

        Once a report is closed in this way, it is archived and cannot be changed. It will
        count neither for nor against the accuser and reviewers.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: The updated accusation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccusationInDepthInfo"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - accusation not found
            - accusation has a terminal status
            - active player is the accusee
  "/accusations/{id}/actions/override_verdict":
    post:
      operationId: override_accusation_verdict
      summary: Override the verdict on an accusation
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.accusations.manage
      description: |
        If not all reviewers issue identical verdicts on a given accusation, they are said to
        "disagree" on the overall verdict.

        In the event of disagreement, an accusation is flagged with a special status indicating
        a need for further review. Any user with override power may then issue an overriding
        verdict on the accusation. Doing so closes the accusation and overrides any other rulings.
        Unlike the standard review workflow, this action does not require a review permit.

        Permissioned users may also issue overriding verdicts on closed accusations. This merely
        updates the overall verdict.

        If the user issued one of the conflicting verdicts initially, this overriding verdict will
        update the initial verdict instead of creating a new one, effectively preventing this
        conflict from contributing toward their review statistics.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateAccusationRulingInput"
      responses:
        200:
          description: The updated accusation
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccusationInDepthInfo"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - accusation not found
            - accusation managed by different server network
            - accusation status is neither `CLOSED` nor `CONFLICTING_VERDICTS`
            - user is the accuser or accusee
  "/accusation_review_permits":
    post:
      operationId: init_accusation_review
      summary: Initiate accusation review
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.accusations.review
      description: |
        Call this endpoint when a staff member wants to review an accusation and is not
        using override power (e.g. to resolve a conflict between disagreeing verdicts
        from other users). Depending on whether `accusation_id` is provided in the request
        body, this endpoint may be used to either reserve a specific accusation for review
        or a random one.

        Any staff member is allowed to initiate review on the same accusation more than
        once. This allows them to update their original verdict. This feature is only
        available before an overall verdict has been established. Permits issued to staff
        members who are updating their previous reviews are not counted toward the permit
        quota.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/InitAccusationReviewInput"
      responses:
        200:
          description: Object representing a reviewable accusation (soft failure possible)
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/InitAccusationReviewResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - accusation (if specified) was not found
            - accusation (if specified) is managed by a different server network
            - active player is the accuser or accusee (if accusation is provided)
  "/accusation_review_permits/{id}":
    delete:
      operationId: cancel_accusation_review
      summary: Cancel an accusation review
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.accusations.review
      description: |
        Calling this endpoint will return an accusation review permit to the shared pool.
        Call this if the user explicitly cancels the review.

        Fully idempotent.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          description: |
            Under any of the following conditions:

            - operator is not a staff member
            - permit does not belong to active server network
            - permit does not belong to operator
  "/players/{id}/reports_issued":
    get:
      operationId: fetch_reports_issued
      summary: Fetch accusations issued by a player
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      description: |
        This endpoint fetches accusations and watch requests issued by a given player. If
        the active user is fetching their own data, then the response will include
        accusations issued across all server networks. Otherwise, the active user must have
        one of the following permissions, and only accusations issued on the active server
        network will be included:

        - com.managemc.staff.owner
        - com.managemc.staff.admin
        - com.managemc.staff.accusations.view

        Accusations that have not yet been submitted are not included unless the user is
        fetching their own data. This endpoint will not include "stats" concepts
        (`ruling_times`, `includes_video_evidence`). Similarly, this endpoint omits the
        `accusee.active_server` field.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: Accusations and watch requests, separately, both in reverse
            creation order
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Reports"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          description: |
            Under any of the following conditions:

            - unpermissioned user is trying to fetch accusations for a different player
        422:
          description: |
            Under any of the following conditions:

            - player not found
  "/players/{id}/reports_received":
    get:
      operationId: fetch_reports_received
      summary: Fetch accusations received by a player
      tags:
      - Accusations
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.accusations.view
      description: |
        This endpoint fetches accusations received by a given player on the active server network.
        Only staff members can use this endpoint.

        Does not include accusations that have been opened but not submitted. This endpoint will
        not include "stats" concepts (`ruling_times`, `includes_video_evidence`). Similarly, this
        endpoint omits the `accusee.active_server` field.

        All accusations and watch requests will pertain to the active server network only.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: Accusations in reverse creation order
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Reports"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player not found
  "/access/configuration":
    get:
      operationId: fetch_access_configuration
      summary: Fetch all information about configured permissions and roles
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.permissions.view
      description: |
        Everything the consumer might possibly need to know about:

        - what permissions/roles are available
        - how permissions are grouped
        - what permission groups are available for and/or in use by the active server network
      responses:
        200:
          description: Accusations in reverse creation order
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccessConfiguration"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
  "/access/configuration/permissions":
    put:
      operationId: configure_permissions
      summary: Create and/or update permissions
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.permissions.configure
      description: |
        Permissions that already exist (based on technical name) will be updated; otherwise,
        permissions will be created. Returns detailed information about all created and updated
        permissions.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ConfigurePermissionsInput"
      responses:
        200:
          description: All permissions requested, sorted by display name
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/PermissionTemplate"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - one or more permissions start with `com.managemc`
            - one or more permissions not found by ID for active server network
            - required fields missing or blank
            - two or more permissions have the same name
            - consumer tries to set server_scopeable to false for a permission that is already
              assigned on a server, either directly or as part of a role
  "/access/configuration/permissions/{name}":
    delete:
      operationId: delete_permission
      summary: Delete a permission template
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.permissions.configure
      description: |
        Deleting a permission template is irreversible. The permission will be deleted, removed
        from all roles and groups, and unassigned from all players. The permission will need to
        be reconfigured manually if this is done accidentally.
      parameters:
      - in: path
        name: name
        schema:
          type: string
        required: true
        description: the technical name of the permission
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - permission not found
            - permission not managed by active server network
  "/access/configuration/roles":
    post:
      operationId: create_role
      summary: Create new role
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.permissions.configure
      description: Create a new role and associate it with permissions.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateOrUpdateRoleInput"
      responses:
        200:
          description: Newly created role
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RoleTemplateExpanded"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - display name for the role is taken, either by built-in role or by another
              role configured by the active server network
            - one or more permissions not found by ID for active server network
            - one or more existing permissions are not configurable
  "/access/configuration/roles/{id}":
    put:
      operationId: update_role
      summary: Update existing role
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.permissions.configure
      description: |
        Fully reconfigure a new role along with its permissions. The permissions passed to
        this endpoint will fully replace the old ones, so include all those the user intends
        to keep.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateOrUpdateRoleInput"
      responses:
        200:
          description: Newly updated role
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RoleTemplateExpanded"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - role not found
            - role is built in
            - role exists but is managed by a different server network
            - role is `SERVER_SCOPED` and one or more permissions the consumer wants to
              associate with it is `NOT_SERVER_SCOPEABLE`
            - any of the 422 conditions listed under `create_role`
    delete:
      operationId: delete_role
      summary: Delete a role template
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.permissions.configure
      description: |
        Deleting a role template is irreversible. The role will be deleted and unassigned
        from all players. The role will need to be reconfigured manually if this is done
        accidentally.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          format: int64
        required: true
        description: the internal ID of the role
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - role not found
            - role not managed by active server network
  "/access/configuration/permission_groups":
    post:
      operationId: create_permission_group
      summary: Create a new permission group
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.permissions.configure
      description: |
        Permission groups are logically related sets of permissions that should be displayed together.
        Unlike roles, permission groups have no programmatic significance. Each permission group may
        have an "omnipermission", a single permission that will grant all of the privileges within the
        group. Permission groups may have subgroups, each with an omnipermission of their own. Arbitrary
        levels of depth are supported.

        Permissions listed within subgroups will not be listed at the top level of the permission
        group, regardless of whether they are included as input. The UI should prevent the user from
        seeing permissions in both places so that they anticipate this behavior.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PermissionGroupInput"
      responses:
        200:
          description: Newly created permission group
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PermissionGroup"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - display name conflicts with that of an existing permission group
            - permission(s) not found
            - permission(s) belong to a different server network
            - permission(s) are special ones not exposed via `fetch_access_configuration`
            - any permission specified more than once, including omnipermissions
            - top level group has no permissions or omnipermissions
  "/access/configuration/permission_groups/{id}":
    put:
      operationId: update_permission_group
      summary: Update an existing permission group
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.permissions.configure
      description: 'This fully replaces all previous attributes, including subgroups
        and permissions.

        '
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/PermissionGroupInput"
      responses:
        200:
          description: Newly created permission group
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PermissionGroup"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - permission group does not exist
            - permission group is managed by a different server network
            - permission group is built-in
            - any of the 422 conditions listed under `create_permission_group`
    delete:
      operationId: delete_permission_group
      summary: Delete a permission group
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.permissions.configure
      description: |
        If the consumer does this by accident, it will cause only a minor inconvenience
        because permission groups have no programmatic significance.

        For idempotence, this request will be ignored if the permission group does not
        exist. However, the consumer is expected to verify that the permission group
        in question is (or was) managed by the active server network.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          format: int64
        description: internal ID of the permission group
        required: true
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - permission group is managed by a different server network
            - permission group is built-in
  "/players/{id}/permissions/{permission_id}/audit":
    get:
      operationId: audit_player_permission
      summary: Determine why a permission is assigned or unassigned
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.permissions.view
      description: |
        Obtain an explanation of why a player does or does not have a given permission
        on a given server. This powers a debugging tool.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      - in: path
        name: permission_id
        schema:
          type: integer
          format: int64
        description: internal ID of the permission template that should be audited
        required: true
      - in: query
        name: server_group_id
        schema:
          type: integer
          format: int64
        required: false
        description: |
          The internal ID of the server group on which to audit the permission.
          Required if permission supports scoping.
      responses:
        200:
          description: Assignment logic for the player, permission, and optionally
            server group
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuditPlayerPermissionResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player not found
            - permission not found or belongs to a different server network
            - permission exists but is not exposed via the `fetch_access_configuration` endpoint
            - permission supports server scoping but no `server_group_id` is provided
            - server group provided but not found
  "/players/{id}/permissions":
    get:
      operationId: fetch_player_permissions
      summary: Fetch a player's permissions
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.permissions.view
      description: |
        Returns a list of permissions currently assigned to the active player according to the
        database. This endpoint reads directly from the database, not a cache.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      responses:
        200:
          description: Permissions currently assigned to the player
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AssignedPermissionsAndRoles"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player not found
    put:
      operationId: assign_player_permissions
      summary: Assign permissions to a player
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.permissions.assign
      description: |
        Completely reconfigures a player's permissions. Consumer must be sure to pass ALL desired permissions
        to this endpoint, as any permissions not specified will be removed.

        To communicate that a permission should be assigned/revoked on the whole server network, the consumer
        should pass an empty array under `server_groups`. For server-scoped permissions, the consumer may
        choose to pass a separate item for each server group (e.g. `[{... server_groups: [1]}, {... server_groups: [2]}]`),
        to pass multiple server groups in the same item (`[{... server_groups: [1, 2]}]`), or some
        combination of those strategies. The effect will be the same, and the response from the server will
        always consolidate server-scoped permissions within a single entity per permission and granted/revoked
        status.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          format: int64
        required: true
        description: the internal ID of the player
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AssignPlayerPermissionsInput"
      responses:
        200:
          description: The player's updated permissions
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AssignedPermissionsAndRoles"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player does not exist in our systems
            - server group not found for active server network
            - permission not found for active server network
            - permission is not directly assignable (these are not included in `fetch_access_configuration`)
            - permission is not server scopeable and `server_groups` is anything but an empty array
            - conflicting information detected (e.g. indicating that a permission should be granted, but also
              indicating that it should be revoked for the same scope and permission template)
  "/players/{id}/permission_scopes/{server_group_id}":
    get:
      operationId: fetch_player_group_permissions
      summary: Fetch a player's permissions on a particular server group
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.permissions.view
      description: |
        Returns a list of permissions currently assigned to the active player on a specific
        server group. Unlike `fetch_player_permissions`, this endpoint reads from a cache
        and therefore has a chance of being up to one minute out of date relative to what
        users have configured.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      - in: path
        name: server_group_id
        schema:
          type: integer
          format: int64
        description: internal ID of the server group for which to fetch permissions
        required: true
      responses:
        200:
          description: Alphabetically sorted permissions assigned to the player on
            the group
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PlayerGroupPermissions"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player not found
            - server group not found
            - server group not associated with active server network
  "/players/{id}/permissions/actions/clone":
    post:
      operationId: clone_player_permissions
      summary: Clone a player's permissions
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.permissions.assign
      description: |
        Clones a player's permissions and assigns them to another player. Returns the same payload as
        `fetch_player_permissions`.

        Permissions that are not directly assignable, which are omitted from `fetch_access_configuration`,
        will neither be deleted nor cloned for both players.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ClonePlayerPermissionsInput"
      responses:
        200:
          description: Permissions newly assigned to the target player
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AssignedPermissionsAndRoles"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - either player does not exist in our systems
            - subject and target players are the same
  "/players/{id}/roles/{role_id}":
    put:
      operationId: assign_player_role
      summary: Assign a role to a player
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.permissions.assign
      description: |
        Assign a single role and/or rescope it. As usual, set `server_groups` to an empty array
        to indicate that the role should be scoped throughout the network.
      parameters:
      - "$ref": "#/components/parameters/NumericIdentifier"
      - in: path
        name: role_id
        schema:
          type: integer
          format: int64
        description: internal ID of the role template to be assigned
        required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AssignPlayerRoleInput"
      responses:
        200:
          description: The player's updated permissions
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AssignedPermissionsAndRoles"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player does not exist in our systems
            - server group not found for active server network
            - role not found for active server network
            - one or more permissions associated with the role is not server scopeable and
              `server_groups` is anything but an empty array
    delete:
      operationId: revoke_player_role
      summary: Revoke a player's role
      tags:
      - Access
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.permissions.assign
      description: |
        Revoke a player's role across all scopes on which it is assigned. Request is
        ignored if the role is not assigned.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
          format: int64
        required: true
        description: the internal ID of the player
      - in: path
        name: role_id
        schema:
          type: integer
          format: int64
        description: internal ID of the role template to be assigned
        required: true
      responses:
        200:
          description: The player's updated permissions
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AssignedPermissionsAndRoles"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
        422:
          description: |
            Under any of the following conditions:

            - player does not exist in our systems
            - role not found for active server network
  "/server_join_events":
    post:
      operationId: record_server_join_event
      summary: Always call this when a player joins a Minecraft server
      tags:
      - Server Traffic
      security:
      - external_minecraft: []
      description: |
        Returns everything the server might need to know about the player's punishment
        status(es), permissions, and identifying information.

        The player will be created in our database if it's not yet known to us.

        Currently, only Spigot servers are supported. But once we support Sponge, Forge,
        and other server modding frameworks, they will also call this endpoint.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ServerJoinEventInput"
      responses:
        200:
          description: |
            Everything the server might need to know about the player before allowing them
            to join
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ServerJoinEventResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - Server does not exist for active server group
            - `time_millis` is in the future or more than 10 minutes ago
  "/server_leave_events":
    post:
      operationId: record_server_leave_event
      summary: Always call this when a player leaves a Minecraft server
      tags:
      - Server Traffic
      security:
      - external_minecraft: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ServerLeaveEventInput"
      responses:
        200:
          "$ref": "#/components/responses/NoOpResponse"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        422:
          description: |
            Under any of the following conditions:

            - Server does not exist for active server group
            - `time_millis` is in the future or more than 10 minutes ago
  "/invalid_players":
    get:
      operationId: fetch_invalid_players
      summary: Fetch players that need manual reconfiguration
      tags:
      - Onboarding
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.players.manage
      description: |
        When players are imported as part of a player or punishment import, they are not
        validated with Mojang right away. Players are flagged as `INVALID` in two cases:

        - player is imported without a UUID (this happens immediately)
        - we try to validate the player but Mojang doesn't recognize it (this happens
          asynchronously)

        When invalid players are detected, it is only possible to correct them manually.
        This is because Mojang has removed two APIs that would have been helpful for this
        in the name of player privacy: username-at-time -> UUID and username history.

        This endpoint fetches the total number of players associated with the active
        server network that need their UUIDs assigned or corrected manually, as well as
        any players assigned to the active user.
      responses:
        200:
          description: Information about invalid players
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/InvalidPlayerInfo"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
  "/invalid_players/assignments":
    post:
      operationId: assign_invalid_players
      summary: Assign players to the active user for UUID (re)assignment
      tags:
      - Onboarding
      security:
      - user_web: []
      - user_mobile: []
      x-permissions:
      - com.managemc.staff.owner
      - com.managemc.staff.admin
      - com.managemc.staff.config.players.manage
      description: |
        If a player does not have a UUID or if its UUID is determined to be invalid, the
        player will be added to a list of players that require manual reconfiguration.
        A user with appropriate permissions may assign some number of players from that
        list to themself to avoid collisions with other staff members who are also fixing
        invalid players.

        Assignment will last for up to one hour, after which the assigned players will be
        returned to the shared pool for someone else to claim. If the user has already
        assigned themself some players, then this request will replace all previous
        assignments.

        If there are no players left to assign, then the `assigned_players` array in the
        response will be empty.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AssignInvalidPlayersInput"
      responses:
        200:
          description: Information about invalid players
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/InvalidPlayerInfo"
        400:
          "$ref": "#/components/responses/SyntaxError"
        401:
          "$ref": "#/components/responses/UnauthenticatedError"
        403:
          "$ref": "#/components/responses/PermissionDeniedError"
